//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityCollections = Unity.Collections;


namespace Algorand.Unity
{
    
    
    public partial struct AppliedSignedTxn
    {
        
        private static bool @__generated__IsValid = AppliedSignedTxn.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            Algorand.Unity.AlgoApiFormatterLookup.Add<Algorand.Unity.AppliedSignedTxn>(new Algorand.Unity.AlgoApiObjectFormatter<Algorand.Unity.AppliedSignedTxn>(false).Assign("sig", (Algorand.Unity.AppliedSignedTxn x) => x.Sig, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.Sig value) => x.Sig = value).Assign("msig", (Algorand.Unity.AppliedSignedTxn x) => x.Msig, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.MultisigSig value) => x.Msig = value).Assign("lsig", (Algorand.Unity.AppliedSignedTxn x) => x.Lsig, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.LogicSig value) => x.Lsig = value).Assign("txn", (Algorand.Unity.AppliedSignedTxn x) => x.Txn, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.Transaction value) => x.Txn = value).Assign("sgnr", (Algorand.Unity.AppliedSignedTxn x) => x.AuthAddr, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.Address value) => x.AuthAddr = value).Assign("ca", (Algorand.Unity.AppliedSignedTxn x) => x.ClosingAmount, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.MicroAlgos value) => x.ClosingAmount = value).Assign("aca", (Algorand.Unity.AppliedSignedTxn x) => x.AssetClosingAmount, (ref Algorand.Unity.AppliedSignedTxn x, System.UInt64 value) => x.AssetClosingAmount = value).Assign("rs", (Algorand.Unity.AppliedSignedTxn x) => x.SenderRewards, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.MicroAlgos value) => x.SenderRewards = value).Assign("rr", (Algorand.Unity.AppliedSignedTxn x) => x.ReceiverRewards, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.MicroAlgos value) => x.ReceiverRewards = value).Assign("rc", (Algorand.Unity.AppliedSignedTxn x) => x.CloseRewards, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.MicroAlgos value) => x.CloseRewards = value).Assign("dt", (Algorand.Unity.AppliedSignedTxn x) => x.EvalDelta, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.EvalDelta<Algorand.Unity.AppliedSignedTxn> value) => x.EvalDelta = value).Assign("caid", (Algorand.Unity.AppliedSignedTxn x) => x.ConfigAsset, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.AssetIndex value) => x.ConfigAsset = value).Assign("apid", (Algorand.Unity.AppliedSignedTxn x) => x.ApplicationId, (ref Algorand.Unity.AppliedSignedTxn x, Algorand.Unity.AppIndex value) => x.ApplicationId = value));
            return true;
        }
    }
}
