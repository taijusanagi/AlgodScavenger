//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//     Runtime Version:4.0.30319.42000
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using UnityCollections = Unity.Collections;


namespace Algorand.Unity
{
    
    
    public partial struct PaymentTxn
    {
        
        private static bool @__generated__IsValid = PaymentTxn.@__generated__InitializeAlgoApiFormatters();
        
        private static bool @__generated__InitializeAlgoApiFormatters()
        {
            Algorand.Unity.AlgoApiFormatterLookup.Add<Algorand.Unity.PaymentTxn>(new Algorand.Unity.AlgoApiObjectFormatter<Algorand.Unity.PaymentTxn>(false).Assign("fee", (Algorand.Unity.PaymentTxn x) => x.Fee, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.MicroAlgos value) => x.Fee = value).Assign("fv", (Algorand.Unity.PaymentTxn x) => x.FirstValidRound, (ref Algorand.Unity.PaymentTxn x, System.UInt64 value) => x.FirstValidRound = value).Assign("gh", (Algorand.Unity.PaymentTxn x) => x.GenesisHash, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.GenesisHash value) => x.GenesisHash = value).Assign("lv", (Algorand.Unity.PaymentTxn x) => x.LastValidRound, (ref Algorand.Unity.PaymentTxn x, System.UInt64 value) => x.LastValidRound = value).Assign("snd", (Algorand.Unity.PaymentTxn x) => x.Sender, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.Address value) => x.Sender = value).Assign("type", (Algorand.Unity.PaymentTxn x) => x.TransactionType, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.TransactionType value) => x.TransactionType = value, Algorand.Unity.ByteEnumComparer<Algorand.Unity.TransactionType>.Instance).Assign("gen", (Algorand.Unity.PaymentTxn x) => x.GenesisId, (ref Algorand.Unity.PaymentTxn x, UnityCollections.FixedString32Bytes value) => x.GenesisId = value).Assign("grp", (Algorand.Unity.PaymentTxn x) => x.Group, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.TransactionId value) => x.Group = value).Assign("lx", (Algorand.Unity.PaymentTxn x) => x.Lease, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.TransactionId value) => x.Lease = value).Assign("note", (Algorand.Unity.PaymentTxn x) => x.Note, (ref Algorand.Unity.PaymentTxn x, System.Byte[] value) => x.Note = value, Algorand.Unity.ArrayComparer<System.Byte>.Instance).Assign("rekey", (Algorand.Unity.PaymentTxn x) => x.RekeyTo, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.Address value) => x.RekeyTo = value).Assign("rcv", (Algorand.Unity.PaymentTxn x) => x.Receiver, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.Address value) => x.Receiver = value).Assign("amt", (Algorand.Unity.PaymentTxn x) => x.Amount, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.MicroAlgos value) => x.Amount = value).Assign("close", (Algorand.Unity.PaymentTxn x) => x.CloseRemainderTo, (ref Algorand.Unity.PaymentTxn x, Algorand.Unity.Address value) => x.CloseRemainderTo = value));
            return true;
        }
        
        public partial struct Params
        {
            
            private static bool @__generated__IsValid = Params.@__generated__InitializeAlgoApiFormatters();
            
            private static bool @__generated__InitializeAlgoApiFormatters()
            {
                Algorand.Unity.AlgoApiFormatterLookup.Add<Algorand.Unity.PaymentTxn.Params>(new Algorand.Unity.AlgoApiObjectFormatter<Algorand.Unity.PaymentTxn.Params>(false).Assign("rcv", (Algorand.Unity.PaymentTxn.Params x) => x.Receiver, (ref Algorand.Unity.PaymentTxn.Params x, Algorand.Unity.Address value) => x.Receiver = value).Assign("amt", (Algorand.Unity.PaymentTxn.Params x) => x.Amount, (ref Algorand.Unity.PaymentTxn.Params x, Algorand.Unity.MicroAlgos value) => x.Amount = value).Assign("close", (Algorand.Unity.PaymentTxn.Params x) => x.CloseRemainderTo, (ref Algorand.Unity.PaymentTxn.Params x, Algorand.Unity.Address value) => x.CloseRemainderTo = value));
                return true;
            }
        }
    }
}
