//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Algorand.Unity.Indexer;
using Algorand.Unity.LowLevel;
using Unity.Collections;
using UnityEngine;

namespace Algorand.Unity
{
    public interface IIndexerClient : IAlgoApiClient
    {
        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup an account's asset holdings, optionally for a specific ID.
        /// </remarks>
        /// <param name="accountId">
        /// account string
        /// </param>
        /// <param name="applicationId">
        /// Application ID
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<ApplicationLocalStatesResponse> LookupAccountAppLocalStates(
            string accountId,
        
            Optional<ulong> applicationId = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup transactions for an asset. Transactions are returned oldest to newest.
        /// </remarks>
        /// <param name="assetId">
        /// 
        /// </param>
        /// <param name="notePrefix">
        /// Specifies a prefix which must be contained in the note field.
        /// </param>
        /// <param name="rekeyTo">
        /// Include results which include the rekey-to field.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <param name="maxRound">
        /// Include results at or before the specified max-round.
        /// </param>
        /// <param name="afterTime">
        /// Include results after the given time. Must be an RFC 3339 formatted string.
        /// </param>
        /// <param name="txType">
        /// 
        /// </param>
        /// <param name="excludeCloseTo">
        /// Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="beforeTime">
        /// Include results before the given time. Must be an RFC 3339 formatted string.
        /// </param>
        /// <param name="minRound">
        /// Include results at or after the specified min-round.
        /// </param>
        /// <param name="currencyGreaterThan">
        /// Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="address">
        /// Only include transactions with this address in one of the transaction fields.
        /// </param>
        /// <param name="currencyLessThan">
        /// Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="sigType">
        /// SigType filters just results using the specified type of signature:
        /// * sig - Standard
        /// * msig - MultiSig
        /// * lsig - LogicSig
        /// </param>
        /// <param name="txid">
        /// Lookup the specific transaction by ID.
        /// </param>
        /// <param name="addressRole">
        /// Combine with the address parameter to define what type of address to search for.
        /// </param>
        /// <param name="round">
        /// Include results for the specified round.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<TransactionsResponse> LookupAssetTransactions(
            ulong assetId,
        
            byte[] notePrefix = default,
        
            Optional<bool> rekeyTo = default,
        
            string next = default,
        
            Optional<ulong> maxRound = default,
        
            DateTime afterTime = default,
        
            string txType = default,
        
            Optional<bool> excludeCloseTo = default,
        
            Optional<ulong> limit = default,
        
            DateTime beforeTime = default,
        
            Optional<ulong> minRound = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Address address = default,
        
            Optional<ulong> currencyLessThan = default,
        
            SignatureType sigType = default,
        
            string txid = default,
        
            AddressRole addressRole = default,
        
            Optional<ulong> round = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for assets.
        /// </remarks>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <param name="creator">
        /// Filter just assets with the given creator address.
        /// </param>
        /// <param name="name">
        /// Filter just assets with the given name.
        /// </param>
        /// <param name="unit">
        /// Filter just assets with the given unit.
        /// </param>
        /// <param name="assetId">
        /// Asset ID
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<AssetsResponse> SearchForAssets(
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default,
        
            string creator = default,
        
            string name = default,
        
            string unit = default,
        
            Optional<ulong> assetId = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup the list of accounts who hold this asset 
        /// </remarks>
        /// <param name="assetId">
        /// 
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <param name="currencyGreaterThan">
        /// Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="currencyLessThan">
        /// Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<AssetBalancesResponse> LookupAssetBalances(
            ulong assetId,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Optional<ulong> currencyLessThan = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup an account's created application parameters, optionally for a specific ID.
        /// </remarks>
        /// <param name="accountId">
        /// account string
        /// </param>
        /// <param name="applicationId">
        /// Application ID
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<ApplicationsResponse> LookupAccountCreatedApplications(
            string accountId,
        
            Optional<ulong> applicationId = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        );

        /// <summary>
        /// Get box information for a given application.
        /// </summary>
        /// <remarks>
        /// Given an application ID and box name, returns base64 encoded box name and value. Box names must be in the goal app call arg form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, encode base 64 and use 'b64' prefix as in 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.
        /// </remarks>
        /// <param name="applicationId">
        /// 
        /// </param>
        /// <param name="boxName">
        /// A box name in goal-arg form 'encoding:value'. For ints, use the form 'int:1234'. For raw bytes, use the form 'b64:A=='. For printable strings, use the form 'str:hello'. For addresses, use the form 'addr:XYZ...'.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<BoxResponse> LookupApplicationBoxByIDAndName(
            ulong applicationId,
        
            string boxName
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup an account's asset holdings, optionally for a specific ID.
        /// </remarks>
        /// <param name="accountId">
        /// account string
        /// </param>
        /// <param name="assetId">
        /// Asset ID
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<AssetHoldingsResponse> LookupAccountAssets(
            string accountId,
        
            Optional<ulong> assetId = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for applications
        /// </remarks>
        /// <param name="applicationId">
        /// Application ID
        /// </param>
        /// <param name="creator">
        /// Filter just applications with the given creator address.
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<ApplicationsResponse> SearchForApplications(
            Optional<ulong> applicationId = default,
        
            string creator = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for accounts.
        /// </remarks>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <param name="applicationId">
        /// Application ID
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="currencyGreaterThan">
        /// Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="authAddr">
        /// Include accounts configured to use this spending key.
        /// </param>
        /// <param name="assetId">
        /// Asset ID
        /// </param>
        /// <param name="exclude">
        /// Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
        /// </param>
        /// <param name="currencyLessThan">
        /// Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="round">
        /// Include results for the specified round. For performance reasons, this parameter may be disabled on some configurations. Using application-id or asset-id filters will return both creator and opt-in accounts. Filtering by include-all will return creator and opt-in accounts for deleted assets and accounts. Non-opt-in managers are not included in the results when asset-id is used.
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<AccountsResponse> SearchForAccounts(
            string next = default,
        
            Optional<ulong> applicationId = default,
        
            Optional<ulong> limit = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Address authAddr = default,
        
            Optional<ulong> assetId = default,
        
            ExcludeAccountFields exclude = default,
        
            Optional<ulong> currencyLessThan = default,
        
            Optional<ulong> round = default,
        
            Optional<bool> includeAll = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup account transactions. Transactions are returned newest to oldest.
        /// </remarks>
        /// <param name="accountId">
        /// account string
        /// </param>
        /// <param name="notePrefix">
        /// Specifies a prefix which must be contained in the note field.
        /// </param>
        /// <param name="rekeyTo">
        /// Include results which include the rekey-to field.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <param name="maxRound">
        /// Include results at or before the specified max-round.
        /// </param>
        /// <param name="afterTime">
        /// Include results after the given time. Must be an RFC 3339 formatted string.
        /// </param>
        /// <param name="txType">
        /// 
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="beforeTime">
        /// Include results before the given time. Must be an RFC 3339 formatted string.
        /// </param>
        /// <param name="minRound">
        /// Include results at or after the specified min-round.
        /// </param>
        /// <param name="currencyGreaterThan">
        /// Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="assetId">
        /// Asset ID
        /// </param>
        /// <param name="currencyLessThan">
        /// Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="sigType">
        /// SigType filters just results using the specified type of signature:
        /// * sig - Standard
        /// * msig - MultiSig
        /// * lsig - LogicSig
        /// </param>
        /// <param name="txid">
        /// Lookup the specific transaction by ID.
        /// </param>
        /// <param name="round">
        /// Include results for the specified round.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<TransactionsResponse> LookupAccountTransactions(
            string accountId,
        
            byte[] notePrefix = default,
        
            Optional<bool> rekeyTo = default,
        
            string next = default,
        
            Optional<ulong> maxRound = default,
        
            DateTime afterTime = default,
        
            string txType = default,
        
            Optional<ulong> limit = default,
        
            DateTime beforeTime = default,
        
            Optional<ulong> minRound = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Optional<ulong> assetId = default,
        
            Optional<ulong> currencyLessThan = default,
        
            SignatureType sigType = default,
        
            string txid = default,
        
            Optional<ulong> round = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Search for transactions. Transactions are returned oldest to newest unless the address parameter is used, in which case results are returned newest to oldest.
        /// </remarks>
        /// <param name="notePrefix">
        /// Specifies a prefix which must be contained in the note field.
        /// </param>
        /// <param name="rekeyTo">
        /// Include results which include the rekey-to field.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <param name="maxRound">
        /// Include results at or before the specified max-round.
        /// </param>
        /// <param name="afterTime">
        /// Include results after the given time. Must be an RFC 3339 formatted string.
        /// </param>
        /// <param name="applicationId">
        /// Application ID
        /// </param>
        /// <param name="txType">
        /// 
        /// </param>
        /// <param name="excludeCloseTo">
        /// Combine with address and address-role parameters to define what type of address to search for. The close to fields are normally treated as a receiver, if you would like to exclude them set this parameter to true.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="beforeTime">
        /// Include results before the given time. Must be an RFC 3339 formatted string.
        /// </param>
        /// <param name="minRound">
        /// Include results at or after the specified min-round.
        /// </param>
        /// <param name="currencyGreaterThan">
        /// Results should have an amount greater than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="address">
        /// Only include transactions with this address in one of the transaction fields.
        /// </param>
        /// <param name="assetId">
        /// Asset ID
        /// </param>
        /// <param name="currencyLessThan">
        /// Results should have an amount less than this value. MicroAlgos are the default currency unless an asset-id is provided, in which case the asset will be used.
        /// </param>
        /// <param name="sigType">
        /// SigType filters just results using the specified type of signature:
        /// * sig - Standard
        /// * msig - MultiSig
        /// * lsig - LogicSig
        /// </param>
        /// <param name="txid">
        /// Lookup the specific transaction by ID.
        /// </param>
        /// <param name="addressRole">
        /// Combine with the address parameter to define what type of address to search for.
        /// </param>
        /// <param name="round">
        /// Include results for the specified round.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<TransactionsResponse> SearchForTransactions(
            byte[] notePrefix = default,
        
            Optional<bool> rekeyTo = default,
        
            string next = default,
        
            Optional<ulong> maxRound = default,
        
            DateTime afterTime = default,
        
            Optional<ulong> applicationId = default,
        
            string txType = default,
        
            Optional<bool> excludeCloseTo = default,
        
            Optional<ulong> limit = default,
        
            DateTime beforeTime = default,
        
            Optional<ulong> minRound = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Address address = default,
        
            Optional<ulong> assetId = default,
        
            Optional<ulong> currencyLessThan = default,
        
            SignatureType sigType = default,
        
            string txid = default,
        
            AddressRole addressRole = default,
        
            Optional<ulong> round = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup asset information.
        /// </remarks>
        /// <param name="assetId">
        /// 
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<AssetResponse> LookupAssetByID(
            ulong assetId,
        
            Optional<bool> includeAll = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup application.
        /// </remarks>
        /// <param name="applicationId">
        /// 
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<ApplicationResponse> LookupApplicationByID(
            ulong applicationId,
        
            Optional<bool> includeAll = default
        );

        /// <summary>
        /// Get box names for a given application.
        /// </summary>
        /// <remarks>
        /// Given an application ID, returns the box names of that application sorted lexicographically.
        /// </remarks>
        /// <param name="applicationId">
        /// 
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<BoxesResponse> SearchForApplicationBoxes(
            ulong applicationId,
        
            Optional<ulong> limit = default,
        
            string next = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup an account's created asset parameters, optionally for a specific ID.
        /// </remarks>
        /// <param name="accountId">
        /// account string
        /// </param>
        /// <param name="assetId">
        /// Asset ID
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<AssetsResponse> LookupAccountCreatedAssets(
            string accountId,
        
            Optional<ulong> assetId = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup application logs.
        /// </remarks>
        /// <param name="applicationId">
        /// 
        /// </param>
        /// <param name="limit">
        /// Maximum number of results to return. There could be additional pages even if the limit is not reached.
        /// </param>
        /// <param name="next">
        /// The next page of results. Use the next token provided by the previous results.
        /// </param>
        /// <param name="txid">
        /// Lookup the specific transaction by ID.
        /// </param>
        /// <param name="minRound">
        /// Include results at or after the specified min-round.
        /// </param>
        /// <param name="maxRound">
        /// Include results at or before the specified max-round.
        /// </param>
        /// <param name="senderAddress">
        /// Only include transactions with this sender address.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<ApplicationLogsResponse> LookupApplicationLogsByID(
            ulong applicationId,
        
            Optional<ulong> limit = default,
        
            string next = default,
        
            string txid = default,
        
            Optional<ulong> minRound = default,
        
            Optional<ulong> maxRound = default,
        
            Address senderAddress = default
        );

        /// <summary>
        /// Returns 200 if healthy.
        /// </summary>
        /// <remarks>
        /// 
        /// </remarks>
        /// <param name="">
        /// 
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<HealthCheckResponse> MakeHealthCheck(
             
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup account information.
        /// </remarks>
        /// <param name="accountId">
        /// account string
        /// </param>
        /// <param name="round">
        /// Include results for the specified round.
        /// </param>
        /// <param name="includeAll">
        /// Include all items including closed accounts, deleted applications, destroyed assets, opted-out asset holdings, and closed-out application localstates.
        /// </param>
        /// <param name="exclude">
        /// Exclude additional items such as asset holdings, application local data stored for this account, asset parameters created by this account, and application parameters created by this account.
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<AccountResponse> LookupAccountByID(
            string accountId,
        
            Optional<ulong> round = default,
        
            Optional<bool> includeAll = default,
        
            ExcludeAccountFields exclude = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup block.
        /// </remarks>
        /// <param name="roundNumber">
        /// Round number
        /// </param>
        /// <param name="headerOnly">
        /// Header only flag. When this is set to true, returned block does not contain the transactions
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<BlockResponse> LookupBlock(
            ulong roundNumber,
        
            Optional<bool> headerOnly = default
        );

        /// <summary>
        /// 
        /// </summary>
        /// <remarks>
        /// Lookup a single transaction.
        /// </remarks>
        /// <param name="txid">
        /// 
        /// </param>
        /// <returns>
        /// 
        /// </returns>
        AlgoApiRequest.Sent<TransactionResponse> LookupTransaction(
            string txid
        );

    }

    public partial struct IndexerClient
        : IIndexerClient
    {
        /// <inheritdoc />
        public AlgoApiRequest.Sent<ApplicationLocalStatesResponse> LookupAccountAppLocalStates(
            string accountId,
        
            Optional<ulong> applicationId = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("application-id", applicationId)
                .Add("include-all", includeAll)
                .Add("limit", limit)
                .Add("next", next)
                ;
            var path = $"/v2/accounts/{accountId}/apps-local-state{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<TransactionsResponse> LookupAssetTransactions(
            ulong assetId,
        
            byte[] notePrefix = default,
        
            Optional<bool> rekeyTo = default,
        
            string next = default,
        
            Optional<ulong> maxRound = default,
        
            DateTime afterTime = default,
        
            string txType = default,
        
            Optional<bool> excludeCloseTo = default,
        
            Optional<ulong> limit = default,
        
            DateTime beforeTime = default,
        
            Optional<ulong> minRound = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Address address = default,
        
            Optional<ulong> currencyLessThan = default,
        
            SignatureType sigType = default,
        
            string txid = default,
        
            AddressRole addressRole = default,
        
            Optional<ulong> round = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("limit", limit)
                .Add("next", next)
                .Add("note-prefix", notePrefix)
                .Add("tx-type", txType)
                .Add("sig-type", sigType)
                .Add("txid", txid)
                .Add("round", round)
                .Add("min-round", minRound)
                .Add("max-round", maxRound)
                .Add("before-time", beforeTime)
                .Add("after-time", afterTime)
                .Add("currency-greater-than", currencyGreaterThan)
                .Add("currency-less-than", currencyLessThan)
                .Add("address", address)
                .Add("address-role", addressRole)
                .Add("exclude-close-to", excludeCloseTo)
                .Add("rekey-to", rekeyTo)
                ;
            var path = $"/v2/assets/{assetId}/transactions{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<AssetsResponse> SearchForAssets(
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default,
        
            string creator = default,
        
            string name = default,
        
            string unit = default,
        
            Optional<ulong> assetId = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("include-all", includeAll)
                .Add("limit", limit)
                .Add("next", next)
                .Add("creator", creator)
                .Add("name", name)
                .Add("unit", unit)
                .Add("asset-id", assetId)
                ;
            var path = $"/v2/assets{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<AssetBalancesResponse> LookupAssetBalances(
            ulong assetId,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Optional<ulong> currencyLessThan = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("include-all", includeAll)
                .Add("limit", limit)
                .Add("next", next)
                .Add("currency-greater-than", currencyGreaterThan)
                .Add("currency-less-than", currencyLessThan)
                ;
            var path = $"/v2/assets/{assetId}/balances{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<ApplicationsResponse> LookupAccountCreatedApplications(
            string accountId,
        
            Optional<ulong> applicationId = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("application-id", applicationId)
                .Add("include-all", includeAll)
                .Add("limit", limit)
                .Add("next", next)
                ;
            var path = $"/v2/accounts/{accountId}/created-applications{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<BoxResponse> LookupApplicationBoxByIDAndName(
            ulong applicationId,
        
            string boxName
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("box-name", boxName)
                ;
            var path = $"/v2/applications/{applicationId}/box{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<AssetHoldingsResponse> LookupAccountAssets(
            string accountId,
        
            Optional<ulong> assetId = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("asset-id", assetId)
                .Add("include-all", includeAll)
                .Add("limit", limit)
                .Add("next", next)
                ;
            var path = $"/v2/accounts/{accountId}/assets{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<ApplicationsResponse> SearchForApplications(
            Optional<ulong> applicationId = default,
        
            string creator = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("application-id", applicationId)
                .Add("creator", creator)
                .Add("include-all", includeAll)
                .Add("limit", limit)
                .Add("next", next)
                ;
            var path = $"/v2/applications{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<AccountsResponse> SearchForAccounts(
            string next = default,
        
            Optional<ulong> applicationId = default,
        
            Optional<ulong> limit = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Address authAddr = default,
        
            Optional<ulong> assetId = default,
        
            ExcludeAccountFields exclude = default,
        
            Optional<ulong> currencyLessThan = default,
        
            Optional<ulong> round = default,
        
            Optional<bool> includeAll = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("asset-id", assetId)
                .Add("limit", limit)
                .Add("next", next)
                .Add("currency-greater-than", currencyGreaterThan)
                .Add("include-all", includeAll)
                .Add("exclude", exclude)
                .Add("currency-less-than", currencyLessThan)
                .Add("auth-addr", authAddr)
                .Add("round", round)
                .Add("application-id", applicationId)
                ;
            var path = $"/v2/accounts{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<TransactionsResponse> LookupAccountTransactions(
            string accountId,
        
            byte[] notePrefix = default,
        
            Optional<bool> rekeyTo = default,
        
            string next = default,
        
            Optional<ulong> maxRound = default,
        
            DateTime afterTime = default,
        
            string txType = default,
        
            Optional<ulong> limit = default,
        
            DateTime beforeTime = default,
        
            Optional<ulong> minRound = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Optional<ulong> assetId = default,
        
            Optional<ulong> currencyLessThan = default,
        
            SignatureType sigType = default,
        
            string txid = default,
        
            Optional<ulong> round = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("limit", limit)
                .Add("next", next)
                .Add("note-prefix", notePrefix)
                .Add("tx-type", txType)
                .Add("sig-type", sigType)
                .Add("txid", txid)
                .Add("round", round)
                .Add("min-round", minRound)
                .Add("max-round", maxRound)
                .Add("asset-id", assetId)
                .Add("before-time", beforeTime)
                .Add("after-time", afterTime)
                .Add("currency-greater-than", currencyGreaterThan)
                .Add("currency-less-than", currencyLessThan)
                .Add("rekey-to", rekeyTo)
                ;
            var path = $"/v2/accounts/{accountId}/transactions{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<TransactionsResponse> SearchForTransactions(
            byte[] notePrefix = default,
        
            Optional<bool> rekeyTo = default,
        
            string next = default,
        
            Optional<ulong> maxRound = default,
        
            DateTime afterTime = default,
        
            Optional<ulong> applicationId = default,
        
            string txType = default,
        
            Optional<bool> excludeCloseTo = default,
        
            Optional<ulong> limit = default,
        
            DateTime beforeTime = default,
        
            Optional<ulong> minRound = default,
        
            Optional<ulong> currencyGreaterThan = default,
        
            Address address = default,
        
            Optional<ulong> assetId = default,
        
            Optional<ulong> currencyLessThan = default,
        
            SignatureType sigType = default,
        
            string txid = default,
        
            AddressRole addressRole = default,
        
            Optional<ulong> round = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("limit", limit)
                .Add("next", next)
                .Add("note-prefix", notePrefix)
                .Add("tx-type", txType)
                .Add("sig-type", sigType)
                .Add("txid", txid)
                .Add("round", round)
                .Add("min-round", minRound)
                .Add("max-round", maxRound)
                .Add("asset-id", assetId)
                .Add("before-time", beforeTime)
                .Add("after-time", afterTime)
                .Add("currency-greater-than", currencyGreaterThan)
                .Add("currency-less-than", currencyLessThan)
                .Add("address", address)
                .Add("address-role", addressRole)
                .Add("exclude-close-to", excludeCloseTo)
                .Add("rekey-to", rekeyTo)
                .Add("application-id", applicationId)
                ;
            var path = $"/v2/transactions{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<AssetResponse> LookupAssetByID(
            ulong assetId,
        
            Optional<bool> includeAll = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("include-all", includeAll)
                ;
            var path = $"/v2/assets/{assetId}{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<ApplicationResponse> LookupApplicationByID(
            ulong applicationId,
        
            Optional<bool> includeAll = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("include-all", includeAll)
                ;
            var path = $"/v2/applications/{applicationId}{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<BoxesResponse> SearchForApplicationBoxes(
            ulong applicationId,
        
            Optional<ulong> limit = default,
        
            string next = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("limit", limit)
                .Add("next", next)
                ;
            var path = $"/v2/applications/{applicationId}/boxes{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<AssetsResponse> LookupAccountCreatedAssets(
            string accountId,
        
            Optional<ulong> assetId = default,
        
            Optional<bool> includeAll = default,
        
            Optional<ulong> limit = default,
        
            string next = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("asset-id", assetId)
                .Add("include-all", includeAll)
                .Add("limit", limit)
                .Add("next", next)
                ;
            var path = $"/v2/accounts/{accountId}/created-assets{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<ApplicationLogsResponse> LookupApplicationLogsByID(
            ulong applicationId,
        
            Optional<ulong> limit = default,
        
            string next = default,
        
            string txid = default,
        
            Optional<ulong> minRound = default,
        
            Optional<ulong> maxRound = default,
        
            Address senderAddress = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("limit", limit)
                .Add("next", next)
                .Add("txid", txid)
                .Add("min-round", minRound)
                .Add("max-round", maxRound)
                .Add("sender-address", senderAddress)
                ;
            var path = $"/v2/applications/{applicationId}/logs{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<HealthCheckResponse> MakeHealthCheck(
             
        )
        {
            var path = $"/health";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<AccountResponse> LookupAccountByID(
            string accountId,
        
            Optional<ulong> round = default,
        
            Optional<bool> includeAll = default,
        
            ExcludeAccountFields exclude = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("round", round)
                .Add("include-all", includeAll)
                .Add("exclude", exclude)
                ;
            var path = $"/v2/accounts/{accountId}{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<BlockResponse> LookupBlock(
            ulong roundNumber,
        
            Optional<bool> headerOnly = default
        )
        {
            using var queryBuilder = new QueryBuilder(Allocator.Temp)
                .Add("header-only", headerOnly)
                ;
            var path = $"/v2/blocks/{roundNumber}{queryBuilder}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

        /// <inheritdoc />
        public AlgoApiRequest.Sent<TransactionResponse> LookupTransaction(
            string txid
        )
        {
            var path = $"/v2/transactions/{txid}";
            return this
                .Get(path)
                
                .Send()
                ;
        }

    }
}
