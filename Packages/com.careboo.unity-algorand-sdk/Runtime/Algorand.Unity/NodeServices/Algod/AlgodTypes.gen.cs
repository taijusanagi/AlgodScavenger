//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a tool.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------

using System;
using Algorand.Unity.Algod;
using Algorand.Unity.LowLevel;
using Unity.Collections;
using UnityEngine;

namespace Algorand.Unity.Algod
{
    [AlgoApiObject, Serializable]
    public partial struct StateProofMessage
        : IEquatable<StateProofMessage>
    {
        [SerializeField, Tooltip(@"The vector commitment root on all light block headers within a state proof interval.")]
        byte[] @blockHeadersCommitment;

        [SerializeField, Tooltip(@"The vector commitment root of the top N accounts to sign the next StateProof.")]
        byte[] @votersCommitment;

        [SerializeField, Tooltip(@"An integer value representing the natural log of the proven weight with 16 bits of precision. This value would be used to verify the next state proof.")]
        ulong @lnProvenWeight;

        [SerializeField, Tooltip(@"The first round the message attests to.")]
        ulong @firstAttestedRound;

        [SerializeField, Tooltip(@"The last round the message attests to.")]
        ulong @lastAttestedRound;

        /// <summary>
        /// The vector commitment root on all light block headers within a state proof interval.        
        /// </summary>
        [AlgoApiField("BlockHeadersCommitment")]
        public byte[] BlockHeadersCommitment
        {
            get => this.@blockHeadersCommitment;
            set => this.@blockHeadersCommitment = value;
        }

        /// <summary>
        /// The vector commitment root of the top N accounts to sign the next StateProof.        
        /// </summary>
        [AlgoApiField("VotersCommitment")]
        public byte[] VotersCommitment
        {
            get => this.@votersCommitment;
            set => this.@votersCommitment = value;
        }

        /// <summary>
        /// An integer value representing the natural log of the proven weight with 16 bits of precision. This value would be used to verify the next state proof.        
        /// </summary>
        [AlgoApiField("LnProvenWeight")]
        public ulong LnProvenWeight
        {
            get => this.@lnProvenWeight;
            set => this.@lnProvenWeight = value;
        }

        /// <summary>
        /// The first round the message attests to.        
        /// </summary>
        [AlgoApiField("FirstAttestedRound")]
        public ulong FirstAttestedRound
        {
            get => this.@firstAttestedRound;
            set => this.@firstAttestedRound = value;
        }

        /// <summary>
        /// The last round the message attests to.        
        /// </summary>
        [AlgoApiField("LastAttestedRound")]
        public ulong LastAttestedRound
        {
            get => this.@lastAttestedRound;
            set => this.@lastAttestedRound = value;
        }

        public bool Equals(StateProofMessage other)
        {
            return
                ArrayComparer.Equals(BlockHeadersCommitment, other.BlockHeadersCommitment) &&
                ArrayComparer.Equals(VotersCommitment, other.VotersCommitment) &&
                LnProvenWeight.Equals(other.LnProvenWeight) &&
                FirstAttestedRound.Equals(other.FirstAttestedRound) &&
                LastAttestedRound.Equals(other.LastAttestedRound)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationParams
        : IEquatable<ApplicationParams>
    {
        [SerializeField, Tooltip(@"The address that created this application. This is the address where the parameters and global state for this application can be found.")]
        Address @creator;

        [SerializeField, Tooltip(@"[approv] approval program.")]
        CompiledTeal @approvalProgram;

        [SerializeField, Tooltip(@"[clearp] approval program.")]
        CompiledTeal @clearStateProgram;

        [SerializeField, Tooltip(@"[epp] the amount of extra program pages available to this app.")]
        Optional<ulong> @extraProgramPages;

        [SerializeField, Tooltip(@"[lsch] local schema")]
        ApplicationStateSchema @localStateSchema;

        [SerializeField, Tooltip(@"[gsch] global schema")]
        ApplicationStateSchema @globalStateSchema;

        [SerializeField, Tooltip(@"[gs] global schema")]
        TealKeyValueStore @globalState;

        /// <summary>
        /// The address that created this application. This is the address where the parameters and global state for this application can be found.        
        /// </summary>
        [AlgoApiField("creator")]
        public Address Creator
        {
            get => this.@creator;
            set => this.@creator = value;
        }

        /// <summary>
        /// [approv] approval program.        
        /// </summary>
        [AlgoApiField("approval-program")]
        public CompiledTeal ApprovalProgram
        {
            get => this.@approvalProgram;
            set => this.@approvalProgram = value;
        }

        /// <summary>
        /// [clearp] approval program.        
        /// </summary>
        [AlgoApiField("clear-state-program")]
        public CompiledTeal ClearStateProgram
        {
            get => this.@clearStateProgram;
            set => this.@clearStateProgram = value;
        }

        /// <summary>
        /// [epp] the amount of extra program pages available to this app.        
        /// </summary>
        [AlgoApiField("extra-program-pages")]
        public Optional<ulong> ExtraProgramPages
        {
            get => this.@extraProgramPages;
            set => this.@extraProgramPages = value;
        }

        /// <summary>
        /// [lsch] local schema        
        /// </summary>
        [AlgoApiField("local-state-schema")]
        public ApplicationStateSchema LocalStateSchema
        {
            get => this.@localStateSchema;
            set => this.@localStateSchema = value;
        }

        /// <summary>
        /// [gsch] global schema        
        /// </summary>
        [AlgoApiField("global-state-schema")]
        public ApplicationStateSchema GlobalStateSchema
        {
            get => this.@globalStateSchema;
            set => this.@globalStateSchema = value;
        }

        /// <summary>
        /// [gs] global schema        
        /// </summary>
        [AlgoApiField("global-state")]
        public TealKeyValueStore GlobalState
        {
            get => this.@globalState;
            set => this.@globalState = value;
        }

        public bool Equals(ApplicationParams other)
        {
            return
                Creator.Equals(other.Creator) &&
                ApprovalProgram.Equals(other.ApprovalProgram) &&
                ClearStateProgram.Equals(other.ClearStateProgram) &&
                ExtraProgramPages.Equals(other.ExtraProgramPages) &&
                LocalStateSchema.Equals(other.LocalStateSchema) &&
                GlobalStateSchema.Equals(other.GlobalStateSchema) &&
                GlobalState.Equals(other.GlobalState)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountDeltas
        : IEquatable<AccountDeltas>
    {
        [SerializeField, Tooltip(@"Array of Account updates for the round")]
        AccountBalanceRecord[] @accounts;

        [SerializeField, Tooltip(@"Array of App updates for the round.")]
        AppResourceRecord[] @apps;

        [SerializeField, Tooltip(@"Array of Asset updates for the round.")]
        AssetResourceRecord[] @assets;

        /// <summary>
        /// Array of Account updates for the round        
        /// </summary>
        [AlgoApiField("accounts")]
        public AccountBalanceRecord[] Accounts
        {
            get => this.@accounts;
            set => this.@accounts = value;
        }

        /// <summary>
        /// Array of App updates for the round.        
        /// </summary>
        [AlgoApiField("apps")]
        public AppResourceRecord[] Apps
        {
            get => this.@apps;
            set => this.@apps = value;
        }

        /// <summary>
        /// Array of Asset updates for the round.        
        /// </summary>
        [AlgoApiField("assets")]
        public AssetResourceRecord[] Assets
        {
            get => this.@assets;
            set => this.@assets = value;
        }

        public bool Equals(AccountDeltas other)
        {
            return
                ArrayComparer.Equals(Accounts, other.Accounts) &&
                ArrayComparer.Equals(Apps, other.Apps) &&
                ArrayComparer.Equals(Assets, other.Assets)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TealValue
        : IEquatable<TealValue>
    {
        [SerializeField, Tooltip(@"[tt] value type. Value `1` refers to **bytes**, value `2` refers to **uint**")]
        ulong @type;

        [SerializeField, Tooltip(@"[tb] bytes value.")]
        string @bytes;

        [SerializeField, Tooltip(@"[ui] uint value.")]
        ulong @uint;

        /// <summary>
        /// [tt] value type. Value `1` refers to **bytes**, value `2` refers to **uint**        
        /// </summary>
        [AlgoApiField("type")]
        public ulong Type
        {
            get => this.@type;
            set => this.@type = value;
        }

        /// <summary>
        /// [tb] bytes value.        
        /// </summary>
        [AlgoApiField("bytes")]
        public string Bytes
        {
            get => this.@bytes;
            set => this.@bytes = value;
        }

        /// <summary>
        /// [ui] uint value.        
        /// </summary>
        [AlgoApiField("uint")]
        public ulong Uint
        {
            get => this.@uint;
            set => this.@uint = value;
        }

        public bool Equals(TealValue other)
        {
            return
                Type.Equals(other.Type) &&
                StringComparer.Equals(Bytes, other.Bytes) &&
                Uint.Equals(other.Uint)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ParticipationKey
        : IEquatable<ParticipationKey>
    {
        [SerializeField, Tooltip(@"The key's ParticipationID.")]
        string @id;

        [SerializeField, Tooltip(@"Address the key was generated for.")]
        Address @address;

        [SerializeField, Tooltip(@"When registered, this is the first round it may be used.")]
        Optional<ulong> @effectiveFirstValid;

        [SerializeField, Tooltip(@"When registered, this is the last round it may be used.")]
        Optional<ulong> @effectiveLastValid;

        [SerializeField, Tooltip(@"Round when this key was last used to vote.")]
        Optional<ulong> @lastVote;

        [SerializeField, Tooltip(@"Round when this key was last used to propose a block.")]
        Optional<ulong> @lastBlockProposal;

        [SerializeField, Tooltip(@"Round when this key was last used to generate a state proof.")]
        Optional<ulong> @lastStateProof;

        [SerializeField, Tooltip(@"Key information stored on the account.")]
        AccountParticipation @key;

        /// <summary>
        /// The key's ParticipationID.        
        /// </summary>
        [AlgoApiField("id")]
        public string Id
        {
            get => this.@id;
            set => this.@id = value;
        }

        /// <summary>
        /// Address the key was generated for.        
        /// </summary>
        [AlgoApiField("address")]
        public Address Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        /// When registered, this is the first round it may be used.        
        /// </summary>
        [AlgoApiField("effective-first-valid")]
        public Optional<ulong> EffectiveFirstValid
        {
            get => this.@effectiveFirstValid;
            set => this.@effectiveFirstValid = value;
        }

        /// <summary>
        /// When registered, this is the last round it may be used.        
        /// </summary>
        [AlgoApiField("effective-last-valid")]
        public Optional<ulong> EffectiveLastValid
        {
            get => this.@effectiveLastValid;
            set => this.@effectiveLastValid = value;
        }

        /// <summary>
        /// Round when this key was last used to vote.        
        /// </summary>
        [AlgoApiField("last-vote")]
        public Optional<ulong> LastVote
        {
            get => this.@lastVote;
            set => this.@lastVote = value;
        }

        /// <summary>
        /// Round when this key was last used to propose a block.        
        /// </summary>
        [AlgoApiField("last-block-proposal")]
        public Optional<ulong> LastBlockProposal
        {
            get => this.@lastBlockProposal;
            set => this.@lastBlockProposal = value;
        }

        /// <summary>
        /// Round when this key was last used to generate a state proof.        
        /// </summary>
        [AlgoApiField("last-state-proof")]
        public Optional<ulong> LastStateProof
        {
            get => this.@lastStateProof;
            set => this.@lastStateProof = value;
        }

        /// <summary>
        /// Key information stored on the account.        
        /// </summary>
        [AlgoApiField("key")]
        public AccountParticipation Key
        {
            get => this.@key;
            set => this.@key = value;
        }

        public bool Equals(ParticipationKey other)
        {
            return
                StringComparer.Equals(Id, other.Id) &&
                Address.Equals(other.Address) &&
                EffectiveFirstValid.Equals(other.EffectiveFirstValid) &&
                EffectiveLastValid.Equals(other.EffectiveLastValid) &&
                LastVote.Equals(other.LastVote) &&
                LastBlockProposal.Equals(other.LastBlockProposal) &&
                LastStateProof.Equals(other.LastStateProof) &&
                Key.Equals(other.Key)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct EvalDelta
        : IEquatable<EvalDelta>
    {
        [SerializeField, Tooltip(@"[at] delta action.")]
        ulong @action;

        [SerializeField, Tooltip(@"[bs] bytes value.")]
        string @bytes;

        [SerializeField, Tooltip(@"[ui] uint value.")]
        Optional<ulong> @uint;

        /// <summary>
        /// [at] delta action.        
        /// </summary>
        [AlgoApiField("action")]
        public ulong Action
        {
            get => this.@action;
            set => this.@action = value;
        }

        /// <summary>
        /// [bs] bytes value.        
        /// </summary>
        [AlgoApiField("bytes")]
        public string Bytes
        {
            get => this.@bytes;
            set => this.@bytes = value;
        }

        /// <summary>
        /// [ui] uint value.        
        /// </summary>
        [AlgoApiField("uint")]
        public Optional<ulong> Uint
        {
            get => this.@uint;
            set => this.@uint = value;
        }

        public bool Equals(EvalDelta other)
        {
            return
                Action.Equals(other.Action) &&
                StringComparer.Equals(Bytes, other.Bytes) &&
                Uint.Equals(other.Uint)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct KvDelta
        : IEquatable<KvDelta>
    {
        [SerializeField, Tooltip(@"The key, base64 encoded.")]
        byte[] @key;

        [SerializeField, Tooltip(@"The new value of the KV store entry, base64 encoded.")]
        byte[] @value;

        /// <summary>
        /// The key, base64 encoded.        
        /// </summary>
        [AlgoApiField("key")]
        public byte[] Key
        {
            get => this.@key;
            set => this.@key = value;
        }

        /// <summary>
        /// The new value of the KV store entry, base64 encoded.        
        /// </summary>
        [AlgoApiField("value")]
        public byte[] Value
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(KvDelta other)
        {
            return
                ArrayComparer.Equals(Key, other.Key) &&
                ArrayComparer.Equals(Value, other.Value)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationStateSchema
        : IEquatable<ApplicationStateSchema>
    {
        [SerializeField, Tooltip(@"[nui] num of uints.")]
        ulong @numUint;

        [SerializeField, Tooltip(@"[nbs] num of byte slices.")]
        ulong @numByteSlice;

        /// <summary>
        /// [nui] num of uints.        
        /// </summary>
        [AlgoApiField("num-uint")]
        public ulong NumUint
        {
            get => this.@numUint;
            set => this.@numUint = value;
        }

        /// <summary>
        /// [nbs] num of byte slices.        
        /// </summary>
        [AlgoApiField("num-byte-slice")]
        public ulong NumByteSlice
        {
            get => this.@numByteSlice;
            set => this.@numByteSlice = value;
        }

        public bool Equals(ApplicationStateSchema other)
        {
            return
                NumUint.Equals(other.NumUint) &&
                NumByteSlice.Equals(other.NumByteSlice)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ModifiedApp
        : IEquatable<ModifiedApp>
    {
        [SerializeField, Tooltip(@"App Id")]
        ulong @id;

        [SerializeField, Tooltip(@"Created if true, deleted if false")]
        bool @created;

        [SerializeField, Tooltip(@"Address of the creator.")]
        string @creator;

        /// <summary>
        /// App Id        
        /// </summary>
        [AlgoApiField("id")]
        public ulong Id
        {
            get => this.@id;
            set => this.@id = value;
        }

        /// <summary>
        /// Created if true, deleted if false        
        /// </summary>
        [AlgoApiField("created")]
        public bool Created
        {
            get => this.@created;
            set => this.@created = value;
        }

        /// <summary>
        /// Address of the creator.        
        /// </summary>
        [AlgoApiField("creator")]
        public string Creator
        {
            get => this.@creator;
            set => this.@creator = value;
        }

        public bool Equals(ModifiedApp other)
        {
            return
                Id.Equals(other.Id) &&
                Created.Equals(other.Created) &&
                StringComparer.Equals(Creator, other.Creator)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunState
        : IEquatable<DryrunState>
    {
        [SerializeField, Tooltip(@"Line number")]
        ulong @line;

        [SerializeField, Tooltip(@"Program counter")]
        ulong @pc;

        [SerializeField, Tooltip(@"")]
        TealValue[] @stack;

        [SerializeField, Tooltip(@"")]
        TealValue[] @scratch;

        [SerializeField, Tooltip(@"Evaluation error if any")]
        string @error;

        /// <summary>
        /// Line number        
        /// </summary>
        [AlgoApiField("line")]
        public ulong Line
        {
            get => this.@line;
            set => this.@line = value;
        }

        /// <summary>
        /// Program counter        
        /// </summary>
        [AlgoApiField("pc")]
        public ulong Pc
        {
            get => this.@pc;
            set => this.@pc = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("stack")]
        public TealValue[] Stack
        {
            get => this.@stack;
            set => this.@stack = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("scratch")]
        public TealValue[] Scratch
        {
            get => this.@scratch;
            set => this.@scratch = value;
        }

        /// <summary>
        /// Evaluation error if any        
        /// </summary>
        [AlgoApiField("error")]
        public string Error
        {
            get => this.@error;
            set => this.@error = value;
        }

        public bool Equals(DryrunState other)
        {
            return
                Line.Equals(other.Line) &&
                Pc.Equals(other.Pc) &&
                ArrayComparer.Equals(Stack, other.Stack) &&
                ArrayComparer.Equals(Scratch, other.Scratch) &&
                StringComparer.Equals(Error, other.Error)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Box
        : IEquatable<Box>
    {
        [SerializeField, Tooltip(@"[name] box name, base64 encoded")]
        byte[] @name;

        [SerializeField, Tooltip(@"The round for which this information is relevant")]
        ulong round;

        [SerializeField, Tooltip(@"[value] box value, base64 encoded.")]
        byte[] @value;

        /// <summary>
        /// [name] box name, base64 encoded        
        /// </summary>
        [AlgoApiField("name")]
        public byte[] Name
        {
            get => this.@name;
            set => this.@name = value;
        }

        /// <summary>
        /// The round for which this information is relevant
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.round;
            set => this.round = value;
        }

        /// <summary>
        /// [value] box value, base64 encoded.        
        /// </summary>
        [AlgoApiField("value")]
        public byte[] Value
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(Box other)
        {
            return
                ArrayComparer.Equals(Name, other.Name) &&
                ArrayComparer.Equals(Value, other.Value)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AppResourceRecord
        : IEquatable<AppResourceRecord>
    {
        [SerializeField, Tooltip(@"App index")]
        ulong @appIndex;

        [SerializeField, Tooltip(@"App account address")]
        string @address;

        [SerializeField, Tooltip(@"Whether the app was deleted")]
        bool @appDeleted;

        [SerializeField, Tooltip(@"Whether the app local state was deleted")]
        bool @appLocalStateDeleted;

        [SerializeField, Tooltip(@"App params")]
        ApplicationParams @appParams;

        [SerializeField, Tooltip(@"App local state")]
        ApplicationLocalState @appLocalState;

        /// <summary>
        /// App index        
        /// </summary>
        [AlgoApiField("app-index")]
        public ulong AppIndex
        {
            get => this.@appIndex;
            set => this.@appIndex = value;
        }

        /// <summary>
        /// App account address        
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        /// Whether the app was deleted        
        /// </summary>
        [AlgoApiField("app-deleted")]
        public bool AppDeleted
        {
            get => this.@appDeleted;
            set => this.@appDeleted = value;
        }

        /// <summary>
        /// Whether the app local state was deleted        
        /// </summary>
        [AlgoApiField("app-local-state-deleted")]
        public bool AppLocalStateDeleted
        {
            get => this.@appLocalStateDeleted;
            set => this.@appLocalStateDeleted = value;
        }

        /// <summary>
        /// App params        
        /// </summary>
        [AlgoApiField("app-params")]
        public ApplicationParams AppParams
        {
            get => this.@appParams;
            set => this.@appParams = value;
        }

        /// <summary>
        /// App local state        
        /// </summary>
        [AlgoApiField("app-local-state")]
        public ApplicationLocalState AppLocalState
        {
            get => this.@appLocalState;
            set => this.@appLocalState = value;
        }

        public bool Equals(AppResourceRecord other)
        {
            return
                AppIndex.Equals(other.AppIndex) &&
                StringComparer.Equals(Address, other.Address) &&
                AppDeleted.Equals(other.AppDeleted) &&
                AppLocalStateDeleted.Equals(other.AppLocalStateDeleted) &&
                AppParams.Equals(other.AppParams) &&
                AppLocalState.Equals(other.AppLocalState)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BuildVersion
        : IEquatable<BuildVersion>
    {
        [SerializeField, Tooltip(@"")]
        string @branch;

        [SerializeField, Tooltip(@"")]
        ulong @build_number;

        [SerializeField, Tooltip(@"")]
        string @channel;

        [SerializeField, Tooltip(@"")]
        string @commit_hash;

        [SerializeField, Tooltip(@"")]
        ulong @major;

        [SerializeField, Tooltip(@"")]
        ulong @minor;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("branch")]
        public string Branch
        {
            get => this.@branch;
            set => this.@branch = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("build_number")]
        public ulong Build_number
        {
            get => this.@build_number;
            set => this.@build_number = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("channel")]
        public string Channel
        {
            get => this.@channel;
            set => this.@channel = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("commit_hash")]
        public string Commit_hash
        {
            get => this.@commit_hash;
            set => this.@commit_hash = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("major")]
        public ulong Major
        {
            get => this.@major;
            set => this.@major = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("minor")]
        public ulong Minor
        {
            get => this.@minor;
            set => this.@minor = value;
        }

        public bool Equals(BuildVersion other)
        {
            return
                StringComparer.Equals(Branch, other.Branch) &&
                Build_number.Equals(other.Build_number) &&
                StringComparer.Equals(Channel, other.Channel) &&
                StringComparer.Equals(Commit_hash, other.Commit_hash) &&
                Major.Equals(other.Major) &&
                Minor.Equals(other.Minor)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunRequest
        : IEquatable<DryrunRequest>
    {
        [SerializeField, Tooltip(@"")]
        byte[][] @txns;

        [SerializeField, Tooltip(@"")]
        Account[] @accounts;

        [SerializeField, Tooltip(@"")]
        Application[] @apps;

        [SerializeField, Tooltip(@"ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.")]
        string @protocolVersion;

        [SerializeField, Tooltip(@"Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.")]
        ulong @round;

        [SerializeField, Tooltip(@"LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.")]
        ulong @latestTimestamp;

        [SerializeField, Tooltip(@"")]
        DryrunSource[] @sources;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("txns")]
        public byte[][] Txns
        {
            get => this.@txns;
            set => this.@txns = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("accounts")]
        public Account[] Accounts
        {
            get => this.@accounts;
            set => this.@accounts = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("apps")]
        public Application[] Apps
        {
            get => this.@apps;
            set => this.@apps = value;
        }

        /// <summary>
        /// ProtocolVersion specifies a specific version string to operate under, otherwise whatever the current protocol of the network this algod is running in.        
        /// </summary>
        [AlgoApiField("protocol-version")]
        public string ProtocolVersion
        {
            get => this.@protocolVersion;
            set => this.@protocolVersion = value;
        }

        /// <summary>
        /// Round is available to some TEAL scripts. Defaults to the current round on the network this algod is attached to.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        /// <summary>
        /// LatestTimestamp is available to some TEAL scripts. Defaults to the latest confirmed timestamp this algod is attached to.        
        /// </summary>
        [AlgoApiField("latest-timestamp")]
        public ulong LatestTimestamp
        {
            get => this.@latestTimestamp;
            set => this.@latestTimestamp = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("sources")]
        public DryrunSource[] Sources
        {
            get => this.@sources;
            set => this.@sources = value;
        }

        public bool Equals(DryrunRequest other)
        {
            return
                ArrayComparer.Equals(Txns, other.Txns) &&
                ArrayComparer.Equals(Accounts, other.Accounts) &&
                ArrayComparer.Equals(Apps, other.Apps) &&
                StringComparer.Equals(ProtocolVersion, other.ProtocolVersion) &&
                Round.Equals(other.Round) &&
                LatestTimestamp.Equals(other.LatestTimestamp) &&
                ArrayComparer.Equals(Sources, other.Sources)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct StateProof
        : IEquatable<StateProof>
    {
        [SerializeField, Tooltip(@"")]
        StateProofMessage @message;

        [SerializeField, Tooltip(@"The encoded StateProof for the message.")]
        byte[] @stateProof;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("Message")]
        public StateProofMessage Message
        {
            get => this.@message;
            set => this.@message = value;
        }

        /// <summary>
        /// The encoded StateProof for the message.        
        /// </summary>
        [AlgoApiField("StateProof")]
        public byte[] Encoded
        {
            get => this.@stateProof;
            set => this.@stateProof = value;
        }

        public bool Equals(StateProof other)
        {
            return
                Message.Equals(other.Message) &&
                ArrayComparer.Equals(Encoded, other.Encoded)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Asset
        : IEquatable<Asset>
    {
        [SerializeField, Tooltip(@"unique asset identifier")]
        ulong @index;

        [SerializeField, Tooltip(@"")]
        AssetParams @params;

        /// <summary>
        /// unique asset identifier        
        /// </summary>
        [AlgoApiField("index")]
        public ulong Index
        {
            get => this.@index;
            set => this.@index = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("params")]
        public AssetParams Params
        {
            get => this.@params;
            set => this.@params = value;
        }

        public bool Equals(Asset other)
        {
            return
                Index.Equals(other.Index) &&
                Params.Equals(other.Params)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TealKeyValue
        : IEquatable<TealKeyValue>
    {
        [SerializeField, Tooltip(@"")]
        string @key;

        [SerializeField, Tooltip(@"")]
        TealValue @value;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("key")]
        public string Key
        {
            get => this.@key;
            set => this.@key = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("value")]
        public TealValue Value
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(TealKeyValue other)
        {
            return
                StringComparer.Equals(Key, other.Key) &&
                Value.Equals(other.Value)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TxLease
        : IEquatable<TxLease>
    {
        [SerializeField, Tooltip(@"Address of the lease sender")]
        string @sender;

        [SerializeField, Tooltip(@"Lease data")]
        byte[] @lease;

        [SerializeField, Tooltip(@"Round that the lease expires")]
        ulong @expiration;

        /// <summary>
        /// Address of the lease sender        
        /// </summary>
        [AlgoApiField("sender")]
        public string Sender
        {
            get => this.@sender;
            set => this.@sender = value;
        }

        /// <summary>
        /// Lease data        
        /// </summary>
        [AlgoApiField("lease")]
        public byte[] Lease
        {
            get => this.@lease;
            set => this.@lease = value;
        }

        /// <summary>
        /// Round that the lease expires        
        /// </summary>
        [AlgoApiField("expiration")]
        public ulong Expiration
        {
            get => this.@expiration;
            set => this.@expiration = value;
        }

        public bool Equals(TxLease other)
        {
            return
                StringComparer.Equals(Sender, other.Sender) &&
                ArrayComparer.Equals(Lease, other.Lease) &&
                Expiration.Equals(other.Expiration)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PendingTransactionResponse
        : IEquatable<PendingTransactionResponse>
    {
        [SerializeField, Tooltip(@"Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.
")]
        string @poolError;

        [SerializeField, Tooltip(@"[lg] Logs for the application being executed by this transaction.")]
        byte[][] @logs;

        [SerializeField, Tooltip(@"Rewards in microalgos applied to the sender account.")]
        Optional<ulong> @senderRewards;

        [SerializeField, Tooltip(@"Closing amount for the transaction.")]
        Optional<ulong> @closingAmount;

        [SerializeField, Tooltip(@"The raw signed transaction.")]
        SignedTxn @txn;

        [SerializeField, Tooltip(@"[gd] Global state key/value changes for the application being executed by this transaction.")]
        StateDelta @globalStateDelta;

        [SerializeField, Tooltip(@"The number of the asset's unit that were transferred to the close-to address.")]
        Optional<ulong> @assetClosingAmount;

        [SerializeField, Tooltip(@"The round where this transaction was confirmed, if present.")]
        Optional<ulong> @confirmedRound;

        [SerializeField, Tooltip(@"The application index if the transaction was found and it created an application.")]
        Optional<ulong> @applicationIndex;

        [SerializeField, Tooltip(@"Rewards in microalgos applied to the receiver account.")]
        Optional<ulong> @receiverRewards;

        [SerializeField, Tooltip(@"Inner transactions produced by application execution.")]
        PendingTransactionResponse[] @innerTxns;

        [SerializeField, Tooltip(@"The asset index if the transaction was found and it created an asset.")]
        Optional<ulong> @assetIndex;

        [SerializeField, Tooltip(@"Rewards in microalgos applied to the close remainder to account.")]
        Optional<ulong> @closeRewards;

        [SerializeField, Tooltip(@"[ld] Local state key/value changes for the application being executed by this transaction.")]
        AccountStateDelta[] @localStateDelta;

        /// <summary>
        /// Indicates that the transaction was kicked out of this node's transaction pool (and specifies why that happened).  An empty string indicates the transaction wasn't kicked out of this node's txpool due to an error.        
        /// </summary>
        [AlgoApiField("pool-error")]
        public string PoolError
        {
            get => this.@poolError;
            set => this.@poolError = value;
        }

        /// <summary>
        /// [lg] Logs for the application being executed by this transaction.        
        /// </summary>
        [AlgoApiField("logs")]
        public byte[][] Logs
        {
            get => this.@logs;
            set => this.@logs = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the sender account.        
        /// </summary>
        [AlgoApiField("sender-rewards")]
        public Optional<ulong> SenderRewards
        {
            get => this.@senderRewards;
            set => this.@senderRewards = value;
        }

        /// <summary>
        /// Closing amount for the transaction.        
        /// </summary>
        [AlgoApiField("closing-amount")]
        public Optional<ulong> ClosingAmount
        {
            get => this.@closingAmount;
            set => this.@closingAmount = value;
        }

        /// <summary>
        /// The raw signed transaction.        
        /// </summary>
        [AlgoApiField("txn")]
        public SignedTxn Txn
        {
            get => this.@txn;
            set => this.@txn = value;
        }

        /// <summary>
        /// [gd] Global state key/value changes for the application being executed by this transaction.        
        /// </summary>
        [AlgoApiField("global-state-delta")]
        public StateDelta GlobalStateDelta
        {
            get => this.@globalStateDelta;
            set => this.@globalStateDelta = value;
        }

        /// <summary>
        /// The number of the asset's unit that were transferred to the close-to address.        
        /// </summary>
        [AlgoApiField("asset-closing-amount")]
        public Optional<ulong> AssetClosingAmount
        {
            get => this.@assetClosingAmount;
            set => this.@assetClosingAmount = value;
        }

        /// <summary>
        /// The round where this transaction was confirmed, if present.        
        /// </summary>
        [AlgoApiField("confirmed-round")]
        public Optional<ulong> ConfirmedRound
        {
            get => this.@confirmedRound;
            set => this.@confirmedRound = value;
        }

        /// <summary>
        /// The application index if the transaction was found and it created an application.        
        /// </summary>
        [AlgoApiField("application-index")]
        public Optional<ulong> ApplicationIndex
        {
            get => this.@applicationIndex;
            set => this.@applicationIndex = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the receiver account.        
        /// </summary>
        [AlgoApiField("receiver-rewards")]
        public Optional<ulong> ReceiverRewards
        {
            get => this.@receiverRewards;
            set => this.@receiverRewards = value;
        }

        /// <summary>
        /// Inner transactions produced by application execution.        
        /// </summary>
        [AlgoApiField("inner-txns")]
        public PendingTransactionResponse[] InnerTxns
        {
            get => this.@innerTxns;
            set => this.@innerTxns = value;
        }

        /// <summary>
        /// The asset index if the transaction was found and it created an asset.        
        /// </summary>
        [AlgoApiField("asset-index")]
        public Optional<ulong> AssetIndex
        {
            get => this.@assetIndex;
            set => this.@assetIndex = value;
        }

        /// <summary>
        /// Rewards in microalgos applied to the close remainder to account.        
        /// </summary>
        [AlgoApiField("close-rewards")]
        public Optional<ulong> CloseRewards
        {
            get => this.@closeRewards;
            set => this.@closeRewards = value;
        }

        /// <summary>
        /// [ld] Local state key/value changes for the application being executed by this transaction.        
        /// </summary>
        [AlgoApiField("local-state-delta")]
        public AccountStateDelta[] LocalStateDelta
        {
            get => this.@localStateDelta;
            set => this.@localStateDelta = value;
        }

        public bool Equals(PendingTransactionResponse other)
        {
            return
                StringComparer.Equals(PoolError, other.PoolError) &&
                ArrayComparer.Equals(Logs, other.Logs) &&
                SenderRewards.Equals(other.SenderRewards) &&
                ClosingAmount.Equals(other.ClosingAmount) &&
                Txn.Equals(other.Txn) &&
                GlobalStateDelta.Equals(other.GlobalStateDelta) &&
                AssetClosingAmount.Equals(other.AssetClosingAmount) &&
                ConfirmedRound.Equals(other.ConfirmedRound) &&
                ApplicationIndex.Equals(other.ApplicationIndex) &&
                ReceiverRewards.Equals(other.ReceiverRewards) &&
                ArrayComparer.Equals(InnerTxns, other.InnerTxns) &&
                AssetIndex.Equals(other.AssetIndex) &&
                CloseRewards.Equals(other.CloseRewards) &&
                ArrayComparer.Equals(LocalStateDelta, other.LocalStateDelta)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunSource
        : IEquatable<DryrunSource>
    {
        [SerializeField, Tooltip(@"FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].")]
        string @fieldName;

        [SerializeField, Tooltip(@"")]
        string @source;

        [SerializeField, Tooltip(@"")]
        ulong @txnIndex;

        [SerializeField, Tooltip(@"")]
        ulong @appIndex;

        /// <summary>
        /// FieldName is what kind of sources this is. If lsig then it goes into the transactions[this.TxnIndex].LogicSig. If approv or clearp it goes into the Approval Program or Clear State Program of application[this.AppIndex].        
        /// </summary>
        [AlgoApiField("field-name")]
        public string FieldName
        {
            get => this.@fieldName;
            set => this.@fieldName = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("source")]
        public string Source
        {
            get => this.@source;
            set => this.@source = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("txn-index")]
        public ulong TxnIndex
        {
            get => this.@txnIndex;
            set => this.@txnIndex = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("app-index")]
        public ulong AppIndex
        {
            get => this.@appIndex;
            set => this.@appIndex = value;
        }

        public bool Equals(DryrunSource other)
        {
            return
                StringComparer.Equals(FieldName, other.FieldName) &&
                StringComparer.Equals(Source, other.Source) &&
                TxnIndex.Equals(other.TxnIndex) &&
                AppIndex.Equals(other.AppIndex)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ModifiedAsset
        : IEquatable<ModifiedAsset>
    {
        [SerializeField, Tooltip(@"Asset Id")]
        ulong @id;

        [SerializeField, Tooltip(@"Created if true, deleted if false")]
        bool @created;

        [SerializeField, Tooltip(@"Address of the creator.")]
        string @creator;

        /// <summary>
        /// Asset Id        
        /// </summary>
        [AlgoApiField("id")]
        public ulong Id
        {
            get => this.@id;
            set => this.@id = value;
        }

        /// <summary>
        /// Created if true, deleted if false        
        /// </summary>
        [AlgoApiField("created")]
        public bool Created
        {
            get => this.@created;
            set => this.@created = value;
        }

        /// <summary>
        /// Address of the creator.        
        /// </summary>
        [AlgoApiField("creator")]
        public string Creator
        {
            get => this.@creator;
            set => this.@creator = value;
        }

        public bool Equals(ModifiedAsset other)
        {
            return
                Id.Equals(other.Id) &&
                Created.Equals(other.Created) &&
                StringComparer.Equals(Creator, other.Creator)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct EvalDeltaKeyValue
        : IEquatable<EvalDeltaKeyValue>
    {
        [SerializeField, Tooltip(@"")]
        string @key;

        [SerializeField, Tooltip(@"")]
        EvalDelta @value;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("key")]
        public string Key
        {
            get => this.@key;
            set => this.@key = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("value")]
        public EvalDelta Value
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(EvalDeltaKeyValue other)
        {
            return
                StringComparer.Equals(Key, other.Key) &&
                Value.Equals(other.Value)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AssetHolding
        : IEquatable<AssetHolding>
    {
        [SerializeField, Tooltip(@"[a] number of units held.")]
        ulong @amount;

        [SerializeField, Tooltip(@"Asset ID of the holding.")]
        AssetIndex @assetId;

        [SerializeField, Tooltip(@"[f] whether or not the holding is frozen.")]
        bool @isFrozen;

        /// <summary>
        /// [a] number of units held.        
        /// </summary>
        [AlgoApiField("amount")]
        public ulong Amount
        {
            get => this.@amount;
            set => this.@amount = value;
        }

        /// <summary>
        /// Asset ID of the holding.        
        /// </summary>
        [AlgoApiField("asset-id")]
        public AssetIndex AssetId
        {
            get => this.@assetId;
            set => this.@assetId = value;
        }

        /// <summary>
        /// [f] whether or not the holding is frozen.        
        /// </summary>
        [AlgoApiField("is-frozen")]
        public bool IsFrozen
        {
            get => this.@isFrozen;
            set => this.@isFrozen = value;
        }

        public bool Equals(AssetHolding other)
        {
            return
                Amount.Equals(other.Amount) &&
                AssetId.Equals(other.AssetId) &&
                IsFrozen.Equals(other.IsFrozen)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Account
        : IEquatable<Account>
    {
        [SerializeField, Tooltip(@"[algo] total number of MicroAlgos in the account")]
        ulong @amount;

        [SerializeField, Tooltip(@"the account public key")]
        string @address;

        [SerializeField, Tooltip(@"[ern] total rewards of MicroAlgos the account has received, including pending rewards.")]
        ulong @rewards;

        [SerializeField, Tooltip(@"specifies the amount of MicroAlgos in the account, without the pending rewards.")]
        ulong @amountWithoutPendingRewards;

        [SerializeField, Tooltip(@"[teap] the sum of all extra application program pages for this account.")]
        Optional<ulong> @appsTotalExtraPages;

        [SerializeField, Tooltip(@"The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.")]
        ulong @totalAssetsOptedIn;

        [SerializeField, Tooltip(@"[asset] assets held by this account.

Note the raw object uses `map[int] -> AssetHolding` for this type.")]
        AssetHolding[] @assets;

        [SerializeField, Tooltip(@"")]
        AccountParticipation @participation;

        [SerializeField, Tooltip(@"[tbxb] The total number of bytes used by this account's app's box keys and values.")]
        Optional<ulong> @totalBoxBytes;

        [SerializeField, Tooltip(@"[tsch] stores the sum of all of the local schemas and global schemas in this account.

Note: the raw account uses `StateSchema` for this type.")]
        ApplicationStateSchema @appsTotalSchema;

        [SerializeField, Tooltip(@"The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.")]
        ulong @totalAppsOptedIn;

        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong @round;

        [SerializeField, Tooltip(@"amount of MicroAlgos of pending rewards in this account.")]
        ulong @pendingRewards;

        [SerializeField, Tooltip(@"[appp] parameters of applications created by this account including app global data.

Note: the raw account uses `map[int] -> AppParams` for this type.")]
        Application[] @createdApps;

        [SerializeField, Tooltip(@"[tbx] The number of existing boxes created by this account's app.")]
        Optional<ulong> @totalBoxes;

        [SerializeField, Tooltip(@"[onl] delegation status of the account's MicroAlgos
* Offline - indicates that the associated account is delegated.
*  Online  - indicates that the associated account used as part of the delegation pool.
*   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.")]
        string @status;

        [SerializeField, Tooltip(@"Indicates what type of signature is used by this account, must be one of:
* sig
* msig
* lsig")]
        SignatureType @sigType;

        [SerializeField, Tooltip(@"[spend] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.")]
        Address @authAddr;

        [SerializeField, Tooltip(@"The count of all assets (AssetParams objects) created by this account.")]
        ulong @totalCreatedAssets;

        [SerializeField, Tooltip(@"MicroAlgo balance required by the account.

The requirement grows based on asset and application usage.")]
        ulong @minBalance;

        [SerializeField, Tooltip(@"[ebase] used as part of the rewards computation. Only applicable to accounts which are participating.")]
        Optional<ulong> @rewardBase;

        [SerializeField, Tooltip(@"[apar] parameters of assets created by this account.

Note: the raw account uses `map[int] -> Asset` for this type.")]
        Asset[] @createdAssets;

        [SerializeField, Tooltip(@"[appl] applications local data stored in this account.

Note the raw object uses `map[int] -> AppLocalState` for this type.")]
        ApplicationLocalState[] @appsLocalState;

        [SerializeField, Tooltip(@"The count of all apps (AppParams objects) created by this account.")]
        ulong @totalCreatedApps;

        /// <summary>
        /// [algo] total number of MicroAlgos in the account        
        /// </summary>
        [AlgoApiField("amount")]
        public ulong Amount
        {
            get => this.@amount;
            set => this.@amount = value;
        }

        /// <summary>
        /// the account public key        
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        /// [ern] total rewards of MicroAlgos the account has received, including pending rewards.        
        /// </summary>
        [AlgoApiField("rewards")]
        public ulong Rewards
        {
            get => this.@rewards;
            set => this.@rewards = value;
        }

        /// <summary>
        /// specifies the amount of MicroAlgos in the account, without the pending rewards.        
        /// </summary>
        [AlgoApiField("amount-without-pending-rewards")]
        public ulong AmountWithoutPendingRewards
        {
            get => this.@amountWithoutPendingRewards;
            set => this.@amountWithoutPendingRewards = value;
        }

        /// <summary>
        /// [teap] the sum of all extra application program pages for this account.        
        /// </summary>
        [AlgoApiField("apps-total-extra-pages")]
        public Optional<ulong> AppsTotalExtraPages
        {
            get => this.@appsTotalExtraPages;
            set => this.@appsTotalExtraPages = value;
        }

        /// <summary>
        /// The count of all assets that have been opted in, equivalent to the count of AssetHolding objects held by this account.        
        /// </summary>
        [AlgoApiField("total-assets-opted-in")]
        public ulong TotalAssetsOptedIn
        {
            get => this.@totalAssetsOptedIn;
            set => this.@totalAssetsOptedIn = value;
        }

        /// <summary>
        /// [asset] assets held by this account.
        /// 
        /// Note the raw object uses `map[int] -> AssetHolding` for this type.        
        /// </summary>
        [AlgoApiField("assets")]
        public AssetHolding[] Assets
        {
            get => this.@assets;
            set => this.@assets = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("participation")]
        public AccountParticipation Participation
        {
            get => this.@participation;
            set => this.@participation = value;
        }

        /// <summary>
        /// [tbxb] The total number of bytes used by this account's app's box keys and values.        
        /// </summary>
        [AlgoApiField("total-box-bytes")]
        public Optional<ulong> TotalBoxBytes
        {
            get => this.@totalBoxBytes;
            set => this.@totalBoxBytes = value;
        }

        /// <summary>
        /// [tsch] stores the sum of all of the local schemas and global schemas in this account.
        /// 
        /// Note: the raw account uses `StateSchema` for this type.        
        /// </summary>
        [AlgoApiField("apps-total-schema")]
        public ApplicationStateSchema AppsTotalSchema
        {
            get => this.@appsTotalSchema;
            set => this.@appsTotalSchema = value;
        }

        /// <summary>
        /// The count of all applications that have been opted in, equivalent to the count of application local data (AppLocalState objects) stored in this account.        
        /// </summary>
        [AlgoApiField("total-apps-opted-in")]
        public ulong TotalAppsOptedIn
        {
            get => this.@totalAppsOptedIn;
            set => this.@totalAppsOptedIn = value;
        }

        /// <summary>
        /// The round for which this information is relevant.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        /// <summary>
        /// amount of MicroAlgos of pending rewards in this account.        
        /// </summary>
        [AlgoApiField("pending-rewards")]
        public ulong PendingRewards
        {
            get => this.@pendingRewards;
            set => this.@pendingRewards = value;
        }

        /// <summary>
        /// [appp] parameters of applications created by this account including app global data.
        /// 
        /// Note: the raw account uses `map[int] -> AppParams` for this type.        
        /// </summary>
        [AlgoApiField("created-apps")]
        public Application[] CreatedApps
        {
            get => this.@createdApps;
            set => this.@createdApps = value;
        }

        /// <summary>
        /// [tbx] The number of existing boxes created by this account's app.        
        /// </summary>
        [AlgoApiField("total-boxes")]
        public Optional<ulong> TotalBoxes
        {
            get => this.@totalBoxes;
            set => this.@totalBoxes = value;
        }

        /// <summary>
        /// [onl] delegation status of the account's MicroAlgos
        /// * Offline - indicates that the associated account is delegated.
        /// *  Online  - indicates that the associated account used as part of the delegation pool.
        /// *   NotParticipating - indicates that the associated account is neither a delegator nor a delegate.        
        /// </summary>
        [AlgoApiField("status")]
        public string Status
        {
            get => this.@status;
            set => this.@status = value;
        }

        /// <summary>
        /// Indicates what type of signature is used by this account, must be one of:
        /// * sig
        /// * msig
        /// * lsig        
        /// </summary>
        [AlgoApiField("sig-type")]
        public SignatureType SigType
        {
            get => this.@sigType;
            set => this.@sigType = value;
        }

        /// <summary>
        /// [spend] the address against which signing should be checked. If empty, the address of the current account is used. This field can be updated in any transaction by setting the RekeyTo field.        
        /// </summary>
        [AlgoApiField("auth-addr")]
        public Address AuthAddr
        {
            get => this.@authAddr;
            set => this.@authAddr = value;
        }

        /// <summary>
        /// The count of all assets (AssetParams objects) created by this account.        
        /// </summary>
        [AlgoApiField("total-created-assets")]
        public ulong TotalCreatedAssets
        {
            get => this.@totalCreatedAssets;
            set => this.@totalCreatedAssets = value;
        }

        /// <summary>
        /// MicroAlgo balance required by the account.
        /// 
        /// The requirement grows based on asset and application usage.        
        /// </summary>
        [AlgoApiField("min-balance")]
        public ulong MinBalance
        {
            get => this.@minBalance;
            set => this.@minBalance = value;
        }

        /// <summary>
        /// [ebase] used as part of the rewards computation. Only applicable to accounts which are participating.        
        /// </summary>
        [AlgoApiField("reward-base")]
        public Optional<ulong> RewardBase
        {
            get => this.@rewardBase;
            set => this.@rewardBase = value;
        }

        /// <summary>
        /// [apar] parameters of assets created by this account.
        /// 
        /// Note: the raw account uses `map[int] -> Asset` for this type.        
        /// </summary>
        [AlgoApiField("created-assets")]
        public Asset[] CreatedAssets
        {
            get => this.@createdAssets;
            set => this.@createdAssets = value;
        }

        /// <summary>
        /// [appl] applications local data stored in this account.
        /// 
        /// Note the raw object uses `map[int] -> AppLocalState` for this type.        
        /// </summary>
        [AlgoApiField("apps-local-state")]
        public ApplicationLocalState[] AppsLocalState
        {
            get => this.@appsLocalState;
            set => this.@appsLocalState = value;
        }

        /// <summary>
        /// The count of all apps (AppParams objects) created by this account.        
        /// </summary>
        [AlgoApiField("total-created-apps")]
        public ulong TotalCreatedApps
        {
            get => this.@totalCreatedApps;
            set => this.@totalCreatedApps = value;
        }

        public bool Equals(Account other)
        {
            return
                Amount.Equals(other.Amount) &&
                StringComparer.Equals(Address, other.Address) &&
                Rewards.Equals(other.Rewards) &&
                AmountWithoutPendingRewards.Equals(other.AmountWithoutPendingRewards) &&
                AppsTotalExtraPages.Equals(other.AppsTotalExtraPages) &&
                TotalAssetsOptedIn.Equals(other.TotalAssetsOptedIn) &&
                ArrayComparer.Equals(Assets, other.Assets) &&
                Participation.Equals(other.Participation) &&
                TotalBoxBytes.Equals(other.TotalBoxBytes) &&
                AppsTotalSchema.Equals(other.AppsTotalSchema) &&
                TotalAppsOptedIn.Equals(other.TotalAppsOptedIn) &&
                Round.Equals(other.Round) &&
                PendingRewards.Equals(other.PendingRewards) &&
                ArrayComparer.Equals(CreatedApps, other.CreatedApps) &&
                TotalBoxes.Equals(other.TotalBoxes) &&
                StringComparer.Equals(Status, other.Status) &&
                SigType.Equals(other.SigType) &&
                AuthAddr.Equals(other.AuthAddr) &&
                TotalCreatedAssets.Equals(other.TotalCreatedAssets) &&
                MinBalance.Equals(other.MinBalance) &&
                RewardBase.Equals(other.RewardBase) &&
                ArrayComparer.Equals(CreatedAssets, other.CreatedAssets) &&
                ArrayComparer.Equals(AppsLocalState, other.AppsLocalState) &&
                TotalCreatedApps.Equals(other.TotalCreatedApps)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountTotals
        : IEquatable<AccountTotals>
    {
        [SerializeField, Tooltip(@"Amount of stake in online accounts")]
        ulong @online;

        [SerializeField, Tooltip(@"Amount of stake in offline accounts")]
        ulong @offline;

        [SerializeField, Tooltip(@"Amount of stake in non-participating accounts")]
        ulong @notParticipating;

        [SerializeField, Tooltip(@"Total number of algos received per reward unit since genesis")]
        ulong @rewardsLevel;

        /// <summary>
        /// Amount of stake in online accounts        
        /// </summary>
        [AlgoApiField("online")]
        public ulong Online
        {
            get => this.@online;
            set => this.@online = value;
        }

        /// <summary>
        /// Amount of stake in offline accounts        
        /// </summary>
        [AlgoApiField("offline")]
        public ulong Offline
        {
            get => this.@offline;
            set => this.@offline = value;
        }

        /// <summary>
        /// Amount of stake in non-participating accounts        
        /// </summary>
        [AlgoApiField("not-participating")]
        public ulong NotParticipating
        {
            get => this.@notParticipating;
            set => this.@notParticipating = value;
        }

        /// <summary>
        /// Total number of algos received per reward unit since genesis        
        /// </summary>
        [AlgoApiField("rewards-level")]
        public ulong RewardsLevel
        {
            get => this.@rewardsLevel;
            set => this.@rewardsLevel = value;
        }

        public bool Equals(AccountTotals other)
        {
            return
                Online.Equals(other.Online) &&
                Offline.Equals(other.Offline) &&
                NotParticipating.Equals(other.NotParticipating) &&
                RewardsLevel.Equals(other.RewardsLevel)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountStateDelta
        : IEquatable<AccountStateDelta>
    {
        [SerializeField, Tooltip(@"")]
        string @address;

        [SerializeField, Tooltip(@"")]
        StateDelta @delta;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("delta")]
        public StateDelta Delta
        {
            get => this.@delta;
            set => this.@delta = value;
        }

        public bool Equals(AccountStateDelta other)
        {
            return
                StringComparer.Equals(Address, other.Address) &&
                Delta.Equals(other.Delta)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountBalanceRecord
        : IEquatable<AccountBalanceRecord>
    {
        [SerializeField, Tooltip(@"Address of the updated account.")]
        string @address;

        [SerializeField, Tooltip(@"Updated account data.")]
        Account @accountData;

        /// <summary>
        /// Address of the updated account.        
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        /// Updated account data.        
        /// </summary>
        [AlgoApiField("account-data")]
        public Account AccountData
        {
            get => this.@accountData;
            set => this.@accountData = value;
        }

        public bool Equals(AccountBalanceRecord other)
        {
            return
                StringComparer.Equals(Address, other.Address) &&
                AccountData.Equals(other.AccountData)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AssetResourceRecord
        : IEquatable<AssetResourceRecord>
    {
        [SerializeField, Tooltip(@"Index of the asset")]
        ulong @assetIndex;

        [SerializeField, Tooltip(@"Account address of the asset")]
        string @address;

        [SerializeField, Tooltip(@"Whether the asset was deleted")]
        bool @assetDeleted;

        [SerializeField, Tooltip(@"Asset params")]
        AssetParams @assetParams;

        [SerializeField, Tooltip(@"Whether the asset holding was deleted")]
        bool @assetHoldingDeleted;

        [SerializeField, Tooltip(@"The asset holding")]
        AssetHolding @assetHolding;

        /// <summary>
        /// Index of the asset        
        /// </summary>
        [AlgoApiField("asset-index")]
        public ulong AssetIndex
        {
            get => this.@assetIndex;
            set => this.@assetIndex = value;
        }

        /// <summary>
        /// Account address of the asset        
        /// </summary>
        [AlgoApiField("address")]
        public string Address
        {
            get => this.@address;
            set => this.@address = value;
        }

        /// <summary>
        /// Whether the asset was deleted        
        /// </summary>
        [AlgoApiField("asset-deleted")]
        public bool AssetDeleted
        {
            get => this.@assetDeleted;
            set => this.@assetDeleted = value;
        }

        /// <summary>
        /// Asset params        
        /// </summary>
        [AlgoApiField("asset-params")]
        public AssetParams AssetParams
        {
            get => this.@assetParams;
            set => this.@assetParams = value;
        }

        /// <summary>
        /// Whether the asset holding was deleted        
        /// </summary>
        [AlgoApiField("asset-holding-deleted")]
        public bool AssetHoldingDeleted
        {
            get => this.@assetHoldingDeleted;
            set => this.@assetHoldingDeleted = value;
        }

        /// <summary>
        /// The asset holding        
        /// </summary>
        [AlgoApiField("asset-holding")]
        public AssetHolding AssetHolding
        {
            get => this.@assetHolding;
            set => this.@assetHolding = value;
        }

        public bool Equals(AssetResourceRecord other)
        {
            return
                AssetIndex.Equals(other.AssetIndex) &&
                StringComparer.Equals(Address, other.Address) &&
                AssetDeleted.Equals(other.AssetDeleted) &&
                AssetParams.Equals(other.AssetParams) &&
                AssetHoldingDeleted.Equals(other.AssetHoldingDeleted) &&
                AssetHolding.Equals(other.AssetHolding)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct LightBlockHeaderProof
        : IEquatable<LightBlockHeaderProof>
    {
        [SerializeField, Tooltip(@"The index of the light block header in the vector commitment tree")]
        ulong @index;

        [SerializeField, Tooltip(@"Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.")]
        ulong @treedepth;

        [SerializeField, Tooltip(@"The encoded proof.")]
        byte[] @proof;

        /// <summary>
        /// The index of the light block header in the vector commitment tree        
        /// </summary>
        [AlgoApiField("index")]
        public ulong Index
        {
            get => this.@index;
            set => this.@index = value;
        }

        /// <summary>
        /// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.        
        /// </summary>
        [AlgoApiField("treedepth")]
        public ulong Treedepth
        {
            get => this.@treedepth;
            set => this.@treedepth = value;
        }

        /// <summary>
        /// The encoded proof.        
        /// </summary>
        [AlgoApiField("proof")]
        public byte[] Proof
        {
            get => this.@proof;
            set => this.@proof = value;
        }

        public bool Equals(LightBlockHeaderProof other)
        {
            return
                Index.Equals(other.Index) &&
                Treedepth.Equals(other.Treedepth) &&
                ArrayComparer.Equals(Proof, other.Proof)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Application
        : IEquatable<Application>
    {
        [SerializeField, Tooltip(@"[appidx] application index.")]
        ulong @id;

        [SerializeField, Tooltip(@"[appparams] application parameters.")]
        ApplicationParams @params;

        /// <summary>
        /// [appidx] application index.        
        /// </summary>
        [AlgoApiField("id")]
        public ulong Id
        {
            get => this.@id;
            set => this.@id = value;
        }

        /// <summary>
        /// [appparams] application parameters.        
        /// </summary>
        [AlgoApiField("params")]
        public ApplicationParams Params
        {
            get => this.@params;
            set => this.@params = value;
        }

        public bool Equals(Application other)
        {
            return
                Id.Equals(other.Id) &&
                Params.Equals(other.Params)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct ApplicationLocalState
        : IEquatable<ApplicationLocalState>
    {
        [SerializeField, Tooltip(@"The application which this local state is for.")]
        ulong @id;

        [SerializeField, Tooltip(@"[hsch] schema.")]
        ApplicationStateSchema @schema;

        [SerializeField, Tooltip(@"[tkv] storage.")]
        TealKeyValueStore @keyValue;

        /// <summary>
        /// The application which this local state is for.        
        /// </summary>
        [AlgoApiField("id")]
        public ulong Id
        {
            get => this.@id;
            set => this.@id = value;
        }

        /// <summary>
        /// [hsch] schema.        
        /// </summary>
        [AlgoApiField("schema")]
        public ApplicationStateSchema Schema
        {
            get => this.@schema;
            set => this.@schema = value;
        }

        /// <summary>
        /// [tkv] storage.        
        /// </summary>
        [AlgoApiField("key-value")]
        public TealKeyValueStore KeyValue
        {
            get => this.@keyValue;
            set => this.@keyValue = value;
        }

        public bool Equals(ApplicationLocalState other)
        {
            return
                Id.Equals(other.Id) &&
                Schema.Equals(other.Schema) &&
                KeyValue.Equals(other.KeyValue)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BoxDescriptor
        : IEquatable<BoxDescriptor>
    {
        [SerializeField, Tooltip(@"Base64 encoded box name")]
        byte[] @name;

        /// <summary>
        /// Base64 encoded box name        
        /// </summary>
        [AlgoApiField("name")]
        public byte[] Name
        {
            get => this.@name;
            set => this.@name = value;
        }

        public bool Equals(BoxDescriptor other)
        {
            return
                ArrayComparer.Equals(Name, other.Name)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct LedgerStateDelta
        : IEquatable<LedgerStateDelta>
    {
        [SerializeField, Tooltip(@"AccountDeltas object")]
        AccountDeltas @accts;

        [SerializeField, Tooltip(@"Array of KV Deltas")]
        KvDelta[] @kvMods;

        [SerializeField, Tooltip(@"List of transaction leases")]
        TxLease[] @txLeases;

        [SerializeField, Tooltip(@"List of modified Apps")]
        ModifiedApp[] @modifiedApps;

        [SerializeField, Tooltip(@"List of modified Assets")]
        ModifiedAsset[] @modifiedAssets;

        [SerializeField, Tooltip(@"Next round for which we expect a state proof")]
        Optional<ulong> @stateProofNext;

        [SerializeField, Tooltip(@"Previous block timestamp")]
        Optional<ulong> @prevTimestamp;

        [SerializeField, Tooltip(@"Account Totals")]
        AccountTotals @totals;

        /// <summary>
        /// AccountDeltas object        
        /// </summary>
        [AlgoApiField("accts")]
        public AccountDeltas Accts
        {
            get => this.@accts;
            set => this.@accts = value;
        }

        /// <summary>
        /// Array of KV Deltas        
        /// </summary>
        [AlgoApiField("kv-mods")]
        public KvDelta[] KvMods
        {
            get => this.@kvMods;
            set => this.@kvMods = value;
        }

        /// <summary>
        /// List of transaction leases        
        /// </summary>
        [AlgoApiField("tx-leases")]
        public TxLease[] TxLeases
        {
            get => this.@txLeases;
            set => this.@txLeases = value;
        }

        /// <summary>
        /// List of modified Apps        
        /// </summary>
        [AlgoApiField("modified-apps")]
        public ModifiedApp[] ModifiedApps
        {
            get => this.@modifiedApps;
            set => this.@modifiedApps = value;
        }

        /// <summary>
        /// List of modified Assets        
        /// </summary>
        [AlgoApiField("modified-assets")]
        public ModifiedAsset[] ModifiedAssets
        {
            get => this.@modifiedAssets;
            set => this.@modifiedAssets = value;
        }

        /// <summary>
        /// Next round for which we expect a state proof        
        /// </summary>
        [AlgoApiField("state-proof-next")]
        public Optional<ulong> StateProofNext
        {
            get => this.@stateProofNext;
            set => this.@stateProofNext = value;
        }

        /// <summary>
        /// Previous block timestamp        
        /// </summary>
        [AlgoApiField("prev-timestamp")]
        public Optional<ulong> PrevTimestamp
        {
            get => this.@prevTimestamp;
            set => this.@prevTimestamp = value;
        }

        /// <summary>
        /// Account Totals        
        /// </summary>
        [AlgoApiField("totals")]
        public AccountTotals Totals
        {
            get => this.@totals;
            set => this.@totals = value;
        }

        public bool Equals(LedgerStateDelta other)
        {
            return
                Accts.Equals(other.Accts) &&
                ArrayComparer.Equals(KvMods, other.KvMods) &&
                ArrayComparer.Equals(TxLeases, other.TxLeases) &&
                ArrayComparer.Equals(ModifiedApps, other.ModifiedApps) &&
                ArrayComparer.Equals(ModifiedAssets, other.ModifiedAssets) &&
                StateProofNext.Equals(other.StateProofNext) &&
                PrevTimestamp.Equals(other.PrevTimestamp) &&
                Totals.Equals(other.Totals)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountParticipation
        : IEquatable<AccountParticipation>
    {
        [SerializeField, Tooltip(@"[sel] Selection public key (if any) currently registered for this round.")]
        byte[] @selectionParticipationKey;

        [SerializeField, Tooltip(@"[voteFst] First round for which this participation is valid.")]
        ulong @voteFirstValid;

        [SerializeField, Tooltip(@"[voteKD] Number of subkeys in each batch of participation keys.")]
        ulong @voteKeyDilution;

        [SerializeField, Tooltip(@"[voteLst] Last round for which this participation is valid.")]
        ulong @voteLastValid;

        [SerializeField, Tooltip(@"[vote] root participation public key (if any) currently registered for this round.")]
        byte[] @voteParticipationKey;

        [SerializeField, Tooltip(@"[stprf] Root of the state proof key (if any)")]
        byte[] @stateProofKey;

        /// <summary>
        /// [sel] Selection public key (if any) currently registered for this round.        
        /// </summary>
        [AlgoApiField("selection-participation-key")]
        public byte[] SelectionParticipationKey
        {
            get => this.@selectionParticipationKey;
            set => this.@selectionParticipationKey = value;
        }

        /// <summary>
        /// [voteFst] First round for which this participation is valid.        
        /// </summary>
        [AlgoApiField("vote-first-valid")]
        public ulong VoteFirstValid
        {
            get => this.@voteFirstValid;
            set => this.@voteFirstValid = value;
        }

        /// <summary>
        /// [voteKD] Number of subkeys in each batch of participation keys.        
        /// </summary>
        [AlgoApiField("vote-key-dilution")]
        public ulong VoteKeyDilution
        {
            get => this.@voteKeyDilution;
            set => this.@voteKeyDilution = value;
        }

        /// <summary>
        /// [voteLst] Last round for which this participation is valid.        
        /// </summary>
        [AlgoApiField("vote-last-valid")]
        public ulong VoteLastValid
        {
            get => this.@voteLastValid;
            set => this.@voteLastValid = value;
        }

        /// <summary>
        /// [vote] root participation public key (if any) currently registered for this round.        
        /// </summary>
        [AlgoApiField("vote-participation-key")]
        public byte[] VoteParticipationKey
        {
            get => this.@voteParticipationKey;
            set => this.@voteParticipationKey = value;
        }

        /// <summary>
        /// [stprf] Root of the state proof key (if any)        
        /// </summary>
        [AlgoApiField("state-proof-key")]
        public byte[] StateProofKey
        {
            get => this.@stateProofKey;
            set => this.@stateProofKey = value;
        }

        public bool Equals(AccountParticipation other)
        {
            return
                ArrayComparer.Equals(SelectionParticipationKey, other.SelectionParticipationKey) &&
                VoteFirstValid.Equals(other.VoteFirstValid) &&
                VoteKeyDilution.Equals(other.VoteKeyDilution) &&
                VoteLastValid.Equals(other.VoteLastValid) &&
                ArrayComparer.Equals(VoteParticipationKey, other.VoteParticipationKey) &&
                ArrayComparer.Equals(StateProofKey, other.StateProofKey)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct Version
        : IEquatable<Version>
    {
        [SerializeField, Tooltip(@"")]
        BuildVersion @build;

        [SerializeField, Tooltip(@"")]
        byte[] @genesis_hash_b64;

        [SerializeField, Tooltip(@"")]
        string @genesis_id;

        [SerializeField, Tooltip(@"")]
        string[] @versions;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("build")]
        public BuildVersion Build
        {
            get => this.@build;
            set => this.@build = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("genesis_hash_b64")]
        public byte[] Genesis_hash_b64
        {
            get => this.@genesis_hash_b64;
            set => this.@genesis_hash_b64 = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("genesis_id")]
        public string Genesis_id
        {
            get => this.@genesis_id;
            set => this.@genesis_id = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("versions")]
        public string[] Versions
        {
            get => this.@versions;
            set => this.@versions = value;
        }

        public bool Equals(Version other)
        {
            return
                Build.Equals(other.Build) &&
                ArrayComparer.Equals(Genesis_hash_b64, other.Genesis_hash_b64) &&
                StringComparer.Equals(Genesis_id, other.Genesis_id) &&
                ArrayComparer.Equals(Versions, other.Versions)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AssetParams
        : IEquatable<AssetParams>
    {
        [SerializeField, Tooltip(@"[df] Whether holdings of this asset are frozen by default.")]
        Optional<bool> @defaultFrozen;

        [SerializeField, Tooltip(@"The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.")]
        string @creator;

        [SerializeField, Tooltip(@"[dc] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).")]
        ulong @decimals;

        [SerializeField, Tooltip(@"[f] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.")]
        string @freeze;

        [SerializeField, Tooltip(@"[r] Address of account holding reserve (non-minted) units of this asset.")]
        string @reserve;

        [SerializeField, Tooltip(@"Base64 encoded name of a unit of this asset, as supplied by the creator.")]
        byte[] @unitNameB64;

        [SerializeField, Tooltip(@"[an] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.")]
        string @name;

        [SerializeField, Tooltip(@"Base64 encoded URL where more information about the asset can be retrieved.")]
        byte[] @urlB64;

        [SerializeField, Tooltip(@"[t] The total number of units of this asset.")]
        ulong @total;

        [SerializeField, Tooltip(@"[m] Address of account used to manage the keys of this asset and to destroy it.")]
        string @manager;

        [SerializeField, Tooltip(@"Base64 encoded name of this asset, as supplied by the creator.")]
        byte[] @nameB64;

        [SerializeField, Tooltip(@"[au] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.")]
        string @url;

        [SerializeField, Tooltip(@"[un] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.")]
        string @unitName;

        [SerializeField, Tooltip(@"[c] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.")]
        string @clawback;

        [SerializeField, Tooltip(@"[am] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.")]
        byte[] @metadataHash;

        /// <summary>
        /// [df] Whether holdings of this asset are frozen by default.        
        /// </summary>
        [AlgoApiField("default-frozen")]
        public Optional<bool> DefaultFrozen
        {
            get => this.@defaultFrozen;
            set => this.@defaultFrozen = value;
        }

        /// <summary>
        /// The address that created this asset. This is the address where the parameters for this asset can be found, and also the address where unwanted asset units can be sent in the worst case.        
        /// </summary>
        [AlgoApiField("creator")]
        public string Creator
        {
            get => this.@creator;
            set => this.@creator = value;
        }

        /// <summary>
        /// [dc] The number of digits to use after the decimal point when displaying this asset. If 0, the asset is not divisible. If 1, the base unit of the asset is in tenths. If 2, the base unit of the asset is in hundredths, and so on. This value must be between 0 and 19 (inclusive).        
        /// </summary>
        [AlgoApiField("decimals")]
        public ulong Decimals
        {
            get => this.@decimals;
            set => this.@decimals = value;
        }

        /// <summary>
        /// [f] Address of account used to freeze holdings of this asset.  If empty, freezing is not permitted.        
        /// </summary>
        [AlgoApiField("freeze")]
        public string Freeze
        {
            get => this.@freeze;
            set => this.@freeze = value;
        }

        /// <summary>
        /// [r] Address of account holding reserve (non-minted) units of this asset.        
        /// </summary>
        [AlgoApiField("reserve")]
        public string Reserve
        {
            get => this.@reserve;
            set => this.@reserve = value;
        }

        /// <summary>
        /// Base64 encoded name of a unit of this asset, as supplied by the creator.        
        /// </summary>
        [AlgoApiField("unit-name-b64")]
        public byte[] UnitNameB64
        {
            get => this.@unitNameB64;
            set => this.@unitNameB64 = value;
        }

        /// <summary>
        /// [an] Name of this asset, as supplied by the creator. Included only when the asset name is composed of printable utf-8 characters.        
        /// </summary>
        [AlgoApiField("name")]
        public string Name
        {
            get => this.@name;
            set => this.@name = value;
        }

        /// <summary>
        /// Base64 encoded URL where more information about the asset can be retrieved.        
        /// </summary>
        [AlgoApiField("url-b64")]
        public byte[] UrlB64
        {
            get => this.@urlB64;
            set => this.@urlB64 = value;
        }

        /// <summary>
        /// [t] The total number of units of this asset.        
        /// </summary>
        [AlgoApiField("total")]
        public ulong Total
        {
            get => this.@total;
            set => this.@total = value;
        }

        /// <summary>
        /// [m] Address of account used to manage the keys of this asset and to destroy it.        
        /// </summary>
        [AlgoApiField("manager")]
        public string Manager
        {
            get => this.@manager;
            set => this.@manager = value;
        }

        /// <summary>
        /// Base64 encoded name of this asset, as supplied by the creator.        
        /// </summary>
        [AlgoApiField("name-b64")]
        public byte[] NameB64
        {
            get => this.@nameB64;
            set => this.@nameB64 = value;
        }

        /// <summary>
        /// [au] URL where more information about the asset can be retrieved. Included only when the URL is composed of printable utf-8 characters.        
        /// </summary>
        [AlgoApiField("url")]
        public string Url
        {
            get => this.@url;
            set => this.@url = value;
        }

        /// <summary>
        /// [un] Name of a unit of this asset, as supplied by the creator. Included only when the name of a unit of this asset is composed of printable utf-8 characters.        
        /// </summary>
        [AlgoApiField("unit-name")]
        public string UnitName
        {
            get => this.@unitName;
            set => this.@unitName = value;
        }

        /// <summary>
        /// [c] Address of account used to clawback holdings of this asset.  If empty, clawback is not permitted.        
        /// </summary>
        [AlgoApiField("clawback")]
        public string Clawback
        {
            get => this.@clawback;
            set => this.@clawback = value;
        }

        /// <summary>
        /// [am] A commitment to some unspecified asset metadata. The format of this metadata is up to the application.        
        /// </summary>
        [AlgoApiField("metadata-hash")]
        public byte[] MetadataHash
        {
            get => this.@metadataHash;
            set => this.@metadataHash = value;
        }

        public bool Equals(AssetParams other)
        {
            return
                DefaultFrozen.Equals(other.DefaultFrozen) &&
                StringComparer.Equals(Creator, other.Creator) &&
                Decimals.Equals(other.Decimals) &&
                StringComparer.Equals(Freeze, other.Freeze) &&
                StringComparer.Equals(Reserve, other.Reserve) &&
                ArrayComparer.Equals(UnitNameB64, other.UnitNameB64) &&
                StringComparer.Equals(Name, other.Name) &&
                ArrayComparer.Equals(UrlB64, other.UrlB64) &&
                Total.Equals(other.Total) &&
                StringComparer.Equals(Manager, other.Manager) &&
                ArrayComparer.Equals(NameB64, other.NameB64) &&
                StringComparer.Equals(Url, other.Url) &&
                StringComparer.Equals(UnitName, other.UnitName) &&
                StringComparer.Equals(Clawback, other.Clawback) &&
                ArrayComparer.Equals(MetadataHash, other.MetadataHash)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunTxnResult
        : IEquatable<DryrunTxnResult>
    {
        [SerializeField, Tooltip(@"")]
        string[] @appCallMessages;

        [SerializeField, Tooltip(@"Disassembled program line by line.")]
        string[] @disassembly;

        [SerializeField, Tooltip(@"")]
        byte[][] @logs;

        [SerializeField, Tooltip(@"Disassembled lsig program line by line.")]
        string[] @logicSigDisassembly;

        [SerializeField, Tooltip(@"")]
        AccountStateDelta[] @localDeltas;

        [SerializeField, Tooltip(@"")]
        DryrunState[] @logicSigTrace;

        [SerializeField, Tooltip(@"Budget consumed during execution of app call transaction.")]
        Optional<ulong> @budgetConsumed;

        [SerializeField, Tooltip(@"")]
        string[] @logicSigMessages;

        [SerializeField, Tooltip(@"")]
        DryrunState[] @appCallTrace;

        [SerializeField, Tooltip(@"")]
        StateDelta @globalDelta;

        [SerializeField, Tooltip(@"Budget added during execution of app call transaction.")]
        Optional<ulong> @budgetAdded;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("app-call-messages")]
        public string[] AppCallMessages
        {
            get => this.@appCallMessages;
            set => this.@appCallMessages = value;
        }

        /// <summary>
        /// Disassembled program line by line.        
        /// </summary>
        [AlgoApiField("disassembly")]
        public string[] Disassembly
        {
            get => this.@disassembly;
            set => this.@disassembly = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("logs")]
        public byte[][] Logs
        {
            get => this.@logs;
            set => this.@logs = value;
        }

        /// <summary>
        /// Disassembled lsig program line by line.        
        /// </summary>
        [AlgoApiField("logic-sig-disassembly")]
        public string[] LogicSigDisassembly
        {
            get => this.@logicSigDisassembly;
            set => this.@logicSigDisassembly = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("local-deltas")]
        public AccountStateDelta[] LocalDeltas
        {
            get => this.@localDeltas;
            set => this.@localDeltas = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("logic-sig-trace")]
        public DryrunState[] LogicSigTrace
        {
            get => this.@logicSigTrace;
            set => this.@logicSigTrace = value;
        }

        /// <summary>
        /// Budget consumed during execution of app call transaction.        
        /// </summary>
        [AlgoApiField("budget-consumed")]
        public Optional<ulong> BudgetConsumed
        {
            get => this.@budgetConsumed;
            set => this.@budgetConsumed = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("logic-sig-messages")]
        public string[] LogicSigMessages
        {
            get => this.@logicSigMessages;
            set => this.@logicSigMessages = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("app-call-trace")]
        public DryrunState[] AppCallTrace
        {
            get => this.@appCallTrace;
            set => this.@appCallTrace = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("global-delta")]
        public StateDelta GlobalDelta
        {
            get => this.@globalDelta;
            set => this.@globalDelta = value;
        }

        /// <summary>
        /// Budget added during execution of app call transaction.        
        /// </summary>
        [AlgoApiField("budget-added")]
        public Optional<ulong> BudgetAdded
        {
            get => this.@budgetAdded;
            set => this.@budgetAdded = value;
        }

        public bool Equals(DryrunTxnResult other)
        {
            return
                ArrayComparer.Equals(AppCallMessages, other.AppCallMessages) &&
                ArrayComparer.Equals(Disassembly, other.Disassembly) &&
                ArrayComparer.Equals(Logs, other.Logs) &&
                ArrayComparer.Equals(LogicSigDisassembly, other.LogicSigDisassembly) &&
                ArrayComparer.Equals(LocalDeltas, other.LocalDeltas) &&
                ArrayComparer.Equals(LogicSigTrace, other.LogicSigTrace) &&
                BudgetConsumed.Equals(other.BudgetConsumed) &&
                ArrayComparer.Equals(LogicSigMessages, other.LogicSigMessages) &&
                ArrayComparer.Equals(AppCallTrace, other.AppCallTrace) &&
                GlobalDelta.Equals(other.GlobalDelta) &&
                BudgetAdded.Equals(other.BudgetAdded)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct CatchpointAbortResponse
        : IEquatable<CatchpointAbortResponse>
    {
        [SerializeField, Tooltip(@"Catchup abort response string")]
        string @catchupMessage;

        /// <summary>
        /// Catchup abort response string        
        /// </summary>
        [AlgoApiField("catchup-message")]
        public string CatchupMessage
        {
            get => this.@catchupMessage;
            set => this.@catchupMessage = value;
        }

        public bool Equals(CatchpointAbortResponse other)
        {
            return
                StringComparer.Equals(CatchupMessage, other.CatchupMessage)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct GetSyncRoundResponse
        : IEquatable<GetSyncRoundResponse>
    {
        [SerializeField, Tooltip(@"The minimum sync round for the ledger.")]
        ulong @round;

        /// <summary>
        /// The minimum sync round for the ledger.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        public bool Equals(GetSyncRoundResponse other)
        {
            return
                Round.Equals(other.Round)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountAssetResponse
        : IEquatable<AccountAssetResponse>
    {
        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong @round;

        [SerializeField, Tooltip(@"[asset] Details about the asset held by this account.

The raw account uses `AssetHolding` for this type.")]
        AssetHolding @assetHolding;

        [SerializeField, Tooltip(@"[apar] parameters of the asset created by this account.

The raw account uses `AssetParams` for this type.")]
        AssetParams @createdAsset;

        /// <summary>
        /// The round for which this information is relevant.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        /// <summary>
        /// [asset] Details about the asset held by this account.
        /// 
        /// The raw account uses `AssetHolding` for this type.        
        /// </summary>
        [AlgoApiField("asset-holding")]
        public AssetHolding AssetHolding
        {
            get => this.@assetHolding;
            set => this.@assetHolding = value;
        }

        /// <summary>
        /// [apar] parameters of the asset created by this account.
        /// 
        /// The raw account uses `AssetParams` for this type.        
        /// </summary>
        [AlgoApiField("created-asset")]
        public AssetParams CreatedAsset
        {
            get => this.@createdAsset;
            set => this.@createdAsset = value;
        }

        public bool Equals(AccountAssetResponse other)
        {
            return
                Round.Equals(other.Round) &&
                AssetHolding.Equals(other.AssetHolding) &&
                CreatedAsset.Equals(other.CreatedAsset)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BlockResponse
        : IEquatable<BlockResponse>
    {
        [SerializeField, Tooltip(@"Block header data.")]
        BlockHeader @block;

        [SerializeField, Tooltip(@"Optional certificate object. This is only included when the format is set to message pack.")]
        BlockCertificate @cert;

        /// <summary>
        /// Block header data.        
        /// </summary>
        [AlgoApiField("block")]
        public BlockHeader Block
        {
            get => this.@block;
            set => this.@block = value;
        }

        /// <summary>
        /// Optional certificate object. This is only included when the format is set to message pack.        
        /// </summary>
        [AlgoApiField("cert")]
        public BlockCertificate Cert
        {
            get => this.@cert;
            set => this.@cert = value;
        }

        public bool Equals(BlockResponse other)
        {
            return
                Block.Equals(other.Block) &&
                Cert.Equals(other.Cert)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BoxesResponse
        : IEquatable<BoxesResponse>
    {
        [SerializeField, Tooltip(@"")]
        BoxDescriptor[] @boxes;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("boxes")]
        public BoxDescriptor[] Boxes
        {
            get => this.@boxes;
            set => this.@boxes = value;
        }

        public bool Equals(BoxesResponse other)
        {
            return
                ArrayComparer.Equals(Boxes, other.Boxes)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TransactionProofResponse
        : IEquatable<TransactionProofResponse>
    {
        [SerializeField, Tooltip(@"Proof of transaction membership.")]
        byte[] @proof;

        [SerializeField, Tooltip(@"Hash of SignedTxnInBlock for verifying proof.")]
        byte[] @stibhash;

        [SerializeField, Tooltip(@"Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.")]
        ulong @treedepth;

        [SerializeField, Tooltip(@"Index of the transaction in the block's payset.")]
        ulong @idx;

        [SerializeField, Tooltip(@"The type of hash function used to create the proof, must be one of: 
* sha512_256 
* sha256")]
        string @hashtype;

        /// <summary>
        /// Proof of transaction membership.        
        /// </summary>
        [AlgoApiField("proof")]
        public byte[] Proof
        {
            get => this.@proof;
            set => this.@proof = value;
        }

        /// <summary>
        /// Hash of SignedTxnInBlock for verifying proof.        
        /// </summary>
        [AlgoApiField("stibhash")]
        public byte[] Stibhash
        {
            get => this.@stibhash;
            set => this.@stibhash = value;
        }

        /// <summary>
        /// Represents the depth of the tree that is being proven, i.e. the number of edges from a leaf to the root.        
        /// </summary>
        [AlgoApiField("treedepth")]
        public ulong Treedepth
        {
            get => this.@treedepth;
            set => this.@treedepth = value;
        }

        /// <summary>
        /// Index of the transaction in the block's payset.        
        /// </summary>
        [AlgoApiField("idx")]
        public ulong Idx
        {
            get => this.@idx;
            set => this.@idx = value;
        }

        /// <summary>
        /// The type of hash function used to create the proof, must be one of: 
        /// * sha512_256 
        /// * sha256        
        /// </summary>
        [AlgoApiField("hashtype")]
        public string Hashtype
        {
            get => this.@hashtype;
            set => this.@hashtype = value;
        }

        public bool Equals(TransactionProofResponse other)
        {
            return
                ArrayComparer.Equals(Proof, other.Proof) &&
                ArrayComparer.Equals(Stibhash, other.Stibhash) &&
                Treedepth.Equals(other.Treedepth) &&
                Idx.Equals(other.Idx) &&
                StringComparer.Equals(Hashtype, other.Hashtype)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct BlockHashResponse
        : IEquatable<BlockHashResponse>
    {
        [SerializeField, Tooltip(@"Block header hash.")]
        string @blockHash;

        /// <summary>
        /// Block header hash.        
        /// </summary>
        [AlgoApiField("blockHash")]
        public string BlockHash
        {
            get => this.@blockHash;
            set => this.@blockHash = value;
        }

        public bool Equals(BlockHashResponse other)
        {
            return
                StringComparer.Equals(BlockHash, other.BlockHash)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct CatchpointStartResponse
        : IEquatable<CatchpointStartResponse>
    {
        [SerializeField, Tooltip(@"Catchup start response string")]
        string @catchupMessage;

        /// <summary>
        /// Catchup start response string        
        /// </summary>
        [AlgoApiField("catchup-message")]
        public string CatchupMessage
        {
            get => this.@catchupMessage;
            set => this.@catchupMessage = value;
        }

        public bool Equals(CatchpointStartResponse other)
        {
            return
                StringComparer.Equals(CatchupMessage, other.CatchupMessage)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PostParticipationResponse
        : IEquatable<PostParticipationResponse>
    {
        [SerializeField, Tooltip(@"encoding of the participation ID.")]
        string @partId;

        /// <summary>
        /// encoding of the participation ID.        
        /// </summary>
        [AlgoApiField("partId")]
        public string PartId
        {
            get => this.@partId;
            set => this.@partId = value;
        }

        public bool Equals(PostParticipationResponse other)
        {
            return
                StringComparer.Equals(PartId, other.PartId)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct CompileResponse
        : IEquatable<CompileResponse>
    {
        [SerializeField, Tooltip(@"base32 SHA512_256 of program bytes (Address style)")]
        string @hash;

        [SerializeField, Tooltip(@"base64 encoded program bytes")]
        string @result;

        [SerializeField, Tooltip(@"JSON of the source map")]
        AlgoApiObject @sourcemap;

        /// <summary>
        /// base32 SHA512_256 of program bytes (Address style)        
        /// </summary>
        [AlgoApiField("hash")]
        public string Hash
        {
            get => this.@hash;
            set => this.@hash = value;
        }

        /// <summary>
        /// base64 encoded program bytes        
        /// </summary>
        [AlgoApiField("result")]
        public string Result
        {
            get => this.@result;
            set => this.@result = value;
        }

        /// <summary>
        /// JSON of the source map        
        /// </summary>
        [AlgoApiField("sourcemap")]
        public AlgoApiObject Sourcemap
        {
            get => this.@sourcemap;
            set => this.@sourcemap = value;
        }

        public bool Equals(CompileResponse other)
        {
            return
                StringComparer.Equals(Hash, other.Hash) &&
                StringComparer.Equals(Result, other.Result) &&
                Sourcemap.Equals(other.Sourcemap)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DisassembleResponse
        : IEquatable<DisassembleResponse>
    {
        [SerializeField, Tooltip(@"disassembled Teal code")]
        string @result;

        /// <summary>
        /// disassembled Teal code        
        /// </summary>
        [AlgoApiField("result")]
        public string Result
        {
            get => this.@result;
            set => this.@result = value;
        }

        public bool Equals(DisassembleResponse other)
        {
            return
                StringComparer.Equals(Result, other.Result)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct NodeStatusResponse
        : IEquatable<NodeStatusResponse>
    {
        [SerializeField, Tooltip(@"StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress")]
        bool @stoppedAtUnsupportedRound;

        [SerializeField, Tooltip(@"The total number of blocks that are required to complete the current catchpoint catchup")]
        Optional<ulong> @catchpointTotalBlocks;

        [SerializeField, Tooltip(@"LastVersion indicates the last consensus version supported")]
        string @lastVersion;

        [SerializeField, Tooltip(@"NextVersionRound is the round at which the next consensus version will apply")]
        ulong @nextVersionRound;

        [SerializeField, Tooltip(@"The total number of accounts included in the current catchpoint")]
        Optional<ulong> @catchpointTotalAccounts;

        [SerializeField, Tooltip(@"TimeSinceLastRound in nanoseconds")]
        ulong @timeSinceLastRound;

        [SerializeField, Tooltip(@"NextVersion of consensus protocol to use")]
        string @nextVersion;

        [SerializeField, Tooltip(@"The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup")]
        Optional<ulong> @catchpointVerifiedKvs;

        [SerializeField, Tooltip(@"The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup")]
        Optional<ulong> @catchpointProcessedKvs;

        [SerializeField, Tooltip(@"The number of accounts from the current catchpoint that have been verified so far as part of the catchup")]
        Optional<ulong> @catchpointVerifiedAccounts;

        [SerializeField, Tooltip(@"CatchupTime in nanoseconds")]
        ulong @catchupTime;

        [SerializeField, Tooltip(@"The last catchpoint seen by the node")]
        string @lastCatchpoint;

        [SerializeField, Tooltip(@"LastRound indicates the last round seen")]
        ulong @lastRound;

        [SerializeField, Tooltip(@"NextVersionSupported indicates whether the next consensus version is supported by this node")]
        bool @nextVersionSupported;

        [SerializeField, Tooltip(@"The current catchpoint that is being caught up to")]
        string @catchpoint;

        [SerializeField, Tooltip(@"The number of blocks that have already been obtained by the node as part of the catchup")]
        Optional<ulong> @catchpointAcquiredBlocks;

        [SerializeField, Tooltip(@"The number of accounts from the current catchpoint that have been processed so far as part of the catchup")]
        Optional<ulong> @catchpointProcessedAccounts;

        [SerializeField, Tooltip(@"The total number of key-values (KVs) included in the current catchpoint")]
        Optional<ulong> @catchpointTotalKvs;

        /// <summary>
        /// StoppedAtUnsupportedRound indicates that the node does not support the new rounds and has stopped making progress        
        /// </summary>
        [AlgoApiField("stopped-at-unsupported-round")]
        public bool StoppedAtUnsupportedRound
        {
            get => this.@stoppedAtUnsupportedRound;
            set => this.@stoppedAtUnsupportedRound = value;
        }

        /// <summary>
        /// The total number of blocks that are required to complete the current catchpoint catchup        
        /// </summary>
        [AlgoApiField("catchpoint-total-blocks")]
        public Optional<ulong> CatchpointTotalBlocks
        {
            get => this.@catchpointTotalBlocks;
            set => this.@catchpointTotalBlocks = value;
        }

        /// <summary>
        /// LastVersion indicates the last consensus version supported        
        /// </summary>
        [AlgoApiField("last-version")]
        public string LastVersion
        {
            get => this.@lastVersion;
            set => this.@lastVersion = value;
        }

        /// <summary>
        /// NextVersionRound is the round at which the next consensus version will apply        
        /// </summary>
        [AlgoApiField("next-version-round")]
        public ulong NextVersionRound
        {
            get => this.@nextVersionRound;
            set => this.@nextVersionRound = value;
        }

        /// <summary>
        /// The total number of accounts included in the current catchpoint        
        /// </summary>
        [AlgoApiField("catchpoint-total-accounts")]
        public Optional<ulong> CatchpointTotalAccounts
        {
            get => this.@catchpointTotalAccounts;
            set => this.@catchpointTotalAccounts = value;
        }

        /// <summary>
        /// TimeSinceLastRound in nanoseconds        
        /// </summary>
        [AlgoApiField("time-since-last-round")]
        public ulong TimeSinceLastRound
        {
            get => this.@timeSinceLastRound;
            set => this.@timeSinceLastRound = value;
        }

        /// <summary>
        /// NextVersion of consensus protocol to use        
        /// </summary>
        [AlgoApiField("next-version")]
        public string NextVersion
        {
            get => this.@nextVersion;
            set => this.@nextVersion = value;
        }

        /// <summary>
        /// The number of key-values (KVs) from the current catchpoint that have been verified so far as part of the catchup        
        /// </summary>
        [AlgoApiField("catchpoint-verified-kvs")]
        public Optional<ulong> CatchpointVerifiedKvs
        {
            get => this.@catchpointVerifiedKvs;
            set => this.@catchpointVerifiedKvs = value;
        }

        /// <summary>
        /// The number of key-values (KVs) from the current catchpoint that have been processed so far as part of the catchup        
        /// </summary>
        [AlgoApiField("catchpoint-processed-kvs")]
        public Optional<ulong> CatchpointProcessedKvs
        {
            get => this.@catchpointProcessedKvs;
            set => this.@catchpointProcessedKvs = value;
        }

        /// <summary>
        /// The number of accounts from the current catchpoint that have been verified so far as part of the catchup        
        /// </summary>
        [AlgoApiField("catchpoint-verified-accounts")]
        public Optional<ulong> CatchpointVerifiedAccounts
        {
            get => this.@catchpointVerifiedAccounts;
            set => this.@catchpointVerifiedAccounts = value;
        }

        /// <summary>
        /// CatchupTime in nanoseconds        
        /// </summary>
        [AlgoApiField("catchup-time")]
        public ulong CatchupTime
        {
            get => this.@catchupTime;
            set => this.@catchupTime = value;
        }

        /// <summary>
        /// The last catchpoint seen by the node        
        /// </summary>
        [AlgoApiField("last-catchpoint")]
        public string LastCatchpoint
        {
            get => this.@lastCatchpoint;
            set => this.@lastCatchpoint = value;
        }

        /// <summary>
        /// LastRound indicates the last round seen        
        /// </summary>
        [AlgoApiField("last-round")]
        public ulong LastRound
        {
            get => this.@lastRound;
            set => this.@lastRound = value;
        }

        /// <summary>
        /// NextVersionSupported indicates whether the next consensus version is supported by this node        
        /// </summary>
        [AlgoApiField("next-version-supported")]
        public bool NextVersionSupported
        {
            get => this.@nextVersionSupported;
            set => this.@nextVersionSupported = value;
        }

        /// <summary>
        /// The current catchpoint that is being caught up to        
        /// </summary>
        [AlgoApiField("catchpoint")]
        public string Catchpoint
        {
            get => this.@catchpoint;
            set => this.@catchpoint = value;
        }

        /// <summary>
        /// The number of blocks that have already been obtained by the node as part of the catchup        
        /// </summary>
        [AlgoApiField("catchpoint-acquired-blocks")]
        public Optional<ulong> CatchpointAcquiredBlocks
        {
            get => this.@catchpointAcquiredBlocks;
            set => this.@catchpointAcquiredBlocks = value;
        }

        /// <summary>
        /// The number of accounts from the current catchpoint that have been processed so far as part of the catchup        
        /// </summary>
        [AlgoApiField("catchpoint-processed-accounts")]
        public Optional<ulong> CatchpointProcessedAccounts
        {
            get => this.@catchpointProcessedAccounts;
            set => this.@catchpointProcessedAccounts = value;
        }

        /// <summary>
        /// The total number of key-values (KVs) included in the current catchpoint        
        /// </summary>
        [AlgoApiField("catchpoint-total-kvs")]
        public Optional<ulong> CatchpointTotalKvs
        {
            get => this.@catchpointTotalKvs;
            set => this.@catchpointTotalKvs = value;
        }

        public bool Equals(NodeStatusResponse other)
        {
            return
                StoppedAtUnsupportedRound.Equals(other.StoppedAtUnsupportedRound) &&
                CatchpointTotalBlocks.Equals(other.CatchpointTotalBlocks) &&
                StringComparer.Equals(LastVersion, other.LastVersion) &&
                NextVersionRound.Equals(other.NextVersionRound) &&
                CatchpointTotalAccounts.Equals(other.CatchpointTotalAccounts) &&
                TimeSinceLastRound.Equals(other.TimeSinceLastRound) &&
                StringComparer.Equals(NextVersion, other.NextVersion) &&
                CatchpointVerifiedKvs.Equals(other.CatchpointVerifiedKvs) &&
                CatchpointProcessedKvs.Equals(other.CatchpointProcessedKvs) &&
                CatchpointVerifiedAccounts.Equals(other.CatchpointVerifiedAccounts) &&
                CatchupTime.Equals(other.CatchupTime) &&
                StringComparer.Equals(LastCatchpoint, other.LastCatchpoint) &&
                LastRound.Equals(other.LastRound) &&
                NextVersionSupported.Equals(other.NextVersionSupported) &&
                StringComparer.Equals(Catchpoint, other.Catchpoint) &&
                CatchpointAcquiredBlocks.Equals(other.CatchpointAcquiredBlocks) &&
                CatchpointProcessedAccounts.Equals(other.CatchpointProcessedAccounts) &&
                CatchpointTotalKvs.Equals(other.CatchpointTotalKvs)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct TransactionParametersResponse
        : IEquatable<TransactionParametersResponse>
    {
        [SerializeField, Tooltip(@"ConsensusVersion indicates the consensus protocol version
as of LastRound.")]
        string @consensusVersion;

        [SerializeField, Tooltip(@"Fee is the suggested transaction fee
Fee is in units of micro-Algos per byte.
Fee may fall to zero but transactions must still have a fee of
at least MinTxnFee for the current network protocol.")]
        ulong @fee;

        [SerializeField, Tooltip(@"GenesisHash is the hash of the genesis block.")]
        byte[] @genesisHash;

        [SerializeField, Tooltip(@"GenesisID is an ID listed in the genesis block.")]
        string @genesisId;

        [SerializeField, Tooltip(@"LastRound indicates the last round seen")]
        ulong @lastRound;

        [SerializeField, Tooltip(@"The minimum transaction fee (not per byte) required for the
txn to validate for the current network protocol.")]
        ulong @minFee;

        /// <summary>
        /// ConsensusVersion indicates the consensus protocol version
        /// as of LastRound.        
        /// </summary>
        [AlgoApiField("consensus-version")]
        public string ConsensusVersion
        {
            get => this.@consensusVersion;
            set => this.@consensusVersion = value;
        }

        /// <summary>
        /// Fee is the suggested transaction fee
        /// Fee is in units of micro-Algos per byte.
        /// Fee may fall to zero but transactions must still have a fee of
        /// at least MinTxnFee for the current network protocol.        
        /// </summary>
        [AlgoApiField("fee")]
        public ulong Fee
        {
            get => this.@fee;
            set => this.@fee = value;
        }

        /// <summary>
        /// GenesisHash is the hash of the genesis block.        
        /// </summary>
        [AlgoApiField("genesis-hash")]
        public byte[] GenesisHash
        {
            get => this.@genesisHash;
            set => this.@genesisHash = value;
        }

        /// <summary>
        /// GenesisID is an ID listed in the genesis block.        
        /// </summary>
        [AlgoApiField("genesis-id")]
        public string GenesisId
        {
            get => this.@genesisId;
            set => this.@genesisId = value;
        }

        /// <summary>
        /// LastRound indicates the last round seen        
        /// </summary>
        [AlgoApiField("last-round")]
        public ulong LastRound
        {
            get => this.@lastRound;
            set => this.@lastRound = value;
        }

        /// <summary>
        /// The minimum transaction fee (not per byte) required for the
        /// txn to validate for the current network protocol.        
        /// </summary>
        [AlgoApiField("min-fee")]
        public ulong MinFee
        {
            get => this.@minFee;
            set => this.@minFee = value;
        }

        public bool Equals(TransactionParametersResponse other)
        {
            return
                StringComparer.Equals(ConsensusVersion, other.ConsensusVersion) &&
                Fee.Equals(other.Fee) &&
                ArrayComparer.Equals(GenesisHash, other.GenesisHash) &&
                StringComparer.Equals(GenesisId, other.GenesisId) &&
                LastRound.Equals(other.LastRound) &&
                MinFee.Equals(other.MinFee)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct SupplyResponse
        : IEquatable<SupplyResponse>
    {
        [SerializeField, Tooltip(@"Round")]
        ulong @current_round;

        [SerializeField, Tooltip(@"OnlineMoney")]
        ulong @onlineMoney;

        [SerializeField, Tooltip(@"TotalMoney")]
        ulong @totalMoney;

        /// <summary>
        /// Round        
        /// </summary>
        [AlgoApiField("current_round")]
        public ulong Current_round
        {
            get => this.@current_round;
            set => this.@current_round = value;
        }

        /// <summary>
        /// OnlineMoney        
        /// </summary>
        [AlgoApiField("online-money")]
        public ulong OnlineMoney
        {
            get => this.@onlineMoney;
            set => this.@onlineMoney = value;
        }

        /// <summary>
        /// TotalMoney        
        /// </summary>
        [AlgoApiField("total-money")]
        public ulong TotalMoney
        {
            get => this.@totalMoney;
            set => this.@totalMoney = value;
        }

        public bool Equals(SupplyResponse other)
        {
            return
                Current_round.Equals(other.Current_round) &&
                OnlineMoney.Equals(other.OnlineMoney) &&
                TotalMoney.Equals(other.TotalMoney)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PendingTransactionsResponse
        : IEquatable<PendingTransactionsResponse>
    {
        [SerializeField, Tooltip(@"An array of signed transaction objects.")]
        SignedTxn[] @topTransactions;

        [SerializeField, Tooltip(@"Total number of transactions in the pool.")]
        ulong @totalTransactions;

        /// <summary>
        /// An array of signed transaction objects.        
        /// </summary>
        [AlgoApiField("top-transactions")]
        public SignedTxn[] TopTransactions
        {
            get => this.@topTransactions;
            set => this.@topTransactions = value;
        }

        /// <summary>
        /// Total number of transactions in the pool.        
        /// </summary>
        [AlgoApiField("total-transactions")]
        public ulong TotalTransactions
        {
            get => this.@totalTransactions;
            set => this.@totalTransactions = value;
        }

        public bool Equals(PendingTransactionsResponse other)
        {
            return
                ArrayComparer.Equals(TopTransactions, other.TopTransactions) &&
                TotalTransactions.Equals(other.TotalTransactions)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct AccountApplicationResponse
        : IEquatable<AccountApplicationResponse>
    {
        [SerializeField, Tooltip(@"The round for which this information is relevant.")]
        ulong @round;

        [SerializeField, Tooltip(@"[appl] the application local data stored in this account.

The raw account uses `AppLocalState` for this type.")]
        ApplicationLocalState @appLocalState;

        [SerializeField, Tooltip(@"[appp] parameters of the application created by this account including app global data.

The raw account uses `AppParams` for this type.")]
        ApplicationParams @createdApp;

        /// <summary>
        /// The round for which this information is relevant.        
        /// </summary>
        [AlgoApiField("round")]
        public ulong Round
        {
            get => this.@round;
            set => this.@round = value;
        }

        /// <summary>
        /// [appl] the application local data stored in this account.
        /// 
        /// The raw account uses `AppLocalState` for this type.        
        /// </summary>
        [AlgoApiField("app-local-state")]
        public ApplicationLocalState AppLocalState
        {
            get => this.@appLocalState;
            set => this.@appLocalState = value;
        }

        /// <summary>
        /// [appp] parameters of the application created by this account including app global data.
        /// 
        /// The raw account uses `AppParams` for this type.        
        /// </summary>
        [AlgoApiField("created-app")]
        public ApplicationParams CreatedApp
        {
            get => this.@createdApp;
            set => this.@createdApp = value;
        }

        public bool Equals(AccountApplicationResponse other)
        {
            return
                Round.Equals(other.Round) &&
                AppLocalState.Equals(other.AppLocalState) &&
                CreatedApp.Equals(other.CreatedApp)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct PostTransactionsResponse
        : IEquatable<PostTransactionsResponse>
    {
        [SerializeField, Tooltip(@"encoding of the transaction hash.")]
        string @txId;

        /// <summary>
        /// encoding of the transaction hash.        
        /// </summary>
        [AlgoApiField("txId")]
        public string TxId
        {
            get => this.@txId;
            set => this.@txId = value;
        }

        public bool Equals(PostTransactionsResponse other)
        {
            return
                StringComparer.Equals(TxId, other.TxId)
                ;
        }
    }

    [AlgoApiObject, Serializable]
    public partial struct DryrunResponse
        : IEquatable<DryrunResponse>
    {
        [SerializeField, Tooltip(@"")]
        DryrunTxnResult[] @txns;

        [SerializeField, Tooltip(@"")]
        string @error;

        [SerializeField, Tooltip(@"Protocol version is the protocol version Dryrun was operated under.")]
        string @protocolVersion;

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("txns")]
        public DryrunTxnResult[] Txns
        {
            get => this.@txns;
            set => this.@txns = value;
        }

        /// <summary>
        ///         
        /// </summary>
        [AlgoApiField("error")]
        public string Error
        {
            get => this.@error;
            set => this.@error = value;
        }

        /// <summary>
        /// Protocol version is the protocol version Dryrun was operated under.        
        /// </summary>
        [AlgoApiField("protocol-version")]
        public string ProtocolVersion
        {
            get => this.@protocolVersion;
            set => this.@protocolVersion = value;
        }

        public bool Equals(DryrunResponse other)
        {
            return
                ArrayComparer.Equals(Txns, other.Txns) &&
                StringComparer.Equals(Error, other.Error) &&
                StringComparer.Equals(ProtocolVersion, other.ProtocolVersion)
                ;
        }
    }

    /// <summary>
    /// Application state delta.    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<StateDelta, EvalDeltaKeyValue[]>))]
    public partial struct StateDelta
        : IEquatable<StateDelta>
        , IWrappedValue<EvalDeltaKeyValue[]>
    {
        [SerializeField]
        EvalDeltaKeyValue[] @value;

        public StateDelta(EvalDeltaKeyValue[] value)
        {
            this.@value = value;
        }

        public EvalDeltaKeyValue[] WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(StateDelta other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator EvalDeltaKeyValue[](StateDelta wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator StateDelta(EvalDeltaKeyValue[] value)
        {
            return new StateDelta(value);
        }
    }

    /// <summary>
    /// Represents a key-value store for use in an application.    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<TealKeyValueStore, TealKeyValue[]>))]
    public partial struct TealKeyValueStore
        : IEquatable<TealKeyValueStore>
        , IWrappedValue<TealKeyValue[]>
    {
        [SerializeField]
        TealKeyValue[] @value;

        public TealKeyValueStore(TealKeyValue[] value)
        {
            this.@value = value;
        }

        public TealKeyValue[] WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(TealKeyValueStore other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator TealKeyValue[](TealKeyValueStore wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator TealKeyValueStore(TealKeyValue[] value)
        {
            return new TealKeyValueStore(value);
        }
    }

    /// <summary>
    /// Application information    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<ApplicationResponse, Application>))]
    public partial struct ApplicationResponse
        : IEquatable<ApplicationResponse>
        , IWrappedValue<Application>
    {
        [SerializeField]
        Application @value;

        public ApplicationResponse(Application value)
        {
            this.@value = value;
        }

        public Application WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(ApplicationResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator Application(ApplicationResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator ApplicationResponse(Application value)
        {
            return new ApplicationResponse(value);
        }
    }

    /// <summary>
    /// Proof of a light block header.    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<LightBlockHeaderProofResponse, LightBlockHeaderProof>))]
    public partial struct LightBlockHeaderProofResponse
        : IEquatable<LightBlockHeaderProofResponse>
        , IWrappedValue<LightBlockHeaderProof>
    {
        [SerializeField]
        LightBlockHeaderProof @value;

        public LightBlockHeaderProofResponse(LightBlockHeaderProof value)
        {
            this.@value = value;
        }

        public LightBlockHeaderProof WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(LightBlockHeaderProofResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator LightBlockHeaderProof(LightBlockHeaderProofResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator LightBlockHeaderProofResponse(LightBlockHeaderProof value)
        {
            return new LightBlockHeaderProofResponse(value);
        }
    }

    /// <summary>
    /// Asset information    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<AssetResponse, Asset>))]
    public partial struct AssetResponse
        : IEquatable<AssetResponse>
        , IWrappedValue<Asset>
    {
        [SerializeField]
        Asset @value;

        public AssetResponse(Asset value)
        {
            this.@value = value;
        }

        public Asset WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(AssetResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator Asset(AssetResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator AssetResponse(Asset value)
        {
            return new AssetResponse(value);
        }
    }

    /// <summary>
    /// A detailed description of a participation ID    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<ParticipationKeyResponse, ParticipationKey>))]
    public partial struct ParticipationKeyResponse
        : IEquatable<ParticipationKeyResponse>
        , IWrappedValue<ParticipationKey>
    {
        [SerializeField]
        ParticipationKey @value;

        public ParticipationKeyResponse(ParticipationKey value)
        {
            this.@value = value;
        }

        public ParticipationKey WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(ParticipationKeyResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator ParticipationKey(ParticipationKeyResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator ParticipationKeyResponse(ParticipationKey value)
        {
            return new ParticipationKeyResponse(value);
        }
    }

    /// <summary>
    /// StateProofResponse wraps the StateProof type in a response.    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<StateProofResponse, StateProof>))]
    public partial struct StateProofResponse
        : IEquatable<StateProofResponse>
        , IWrappedValue<StateProof>
    {
        [SerializeField]
        StateProof @value;

        public StateProofResponse(StateProof value)
        {
            this.@value = value;
        }

        public StateProof WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(StateProofResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator StateProof(StateProofResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator StateProofResponse(StateProof value)
        {
            return new StateProofResponse(value);
        }
    }

    /// <summary>
    /// A list of participation keys    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<ParticipationKeysResponse, ParticipationKey[]>))]
    public partial struct ParticipationKeysResponse
        : IEquatable<ParticipationKeysResponse>
        , IWrappedValue<ParticipationKey[]>
    {
        [SerializeField]
        ParticipationKey[] @value;

        public ParticipationKeysResponse(ParticipationKey[] value)
        {
            this.@value = value;
        }

        public ParticipationKey[] WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(ParticipationKeysResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator ParticipationKey[](ParticipationKeysResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator ParticipationKeysResponse(ParticipationKey[] value)
        {
            return new ParticipationKeysResponse(value);
        }
    }

    /// <summary>
    /// AccountResponse wraps the Account type in a response.    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<AccountResponse, Account>))]
    public partial struct AccountResponse
        : IEquatable<AccountResponse>
        , IWrappedValue<Account>
    {
        [SerializeField]
        Account @value;

        public AccountResponse(Account value)
        {
            this.@value = value;
        }

        public Account WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(AccountResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator Account(AccountResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator AccountResponse(Account value)
        {
            return new AccountResponse(value);
        }
    }

    /// <summary>
    /// VersionsResponse is the response to 'GET /versions'    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<VersionsResponse, Version>))]
    public partial struct VersionsResponse
        : IEquatable<VersionsResponse>
        , IWrappedValue<Version>
    {
        [SerializeField]
        Version @value;

        public VersionsResponse(Version value)
        {
            this.@value = value;
        }

        public Version WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(VersionsResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator Version(VersionsResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator VersionsResponse(Version value)
        {
            return new VersionsResponse(value);
        }
    }

    /// <summary>
    /// Contains ledger deltas    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<LedgerStateDeltaResponse, LedgerStateDelta>))]
    public partial struct LedgerStateDeltaResponse
        : IEquatable<LedgerStateDeltaResponse>
        , IWrappedValue<LedgerStateDelta>
    {
        [SerializeField]
        LedgerStateDelta @value;

        public LedgerStateDeltaResponse(LedgerStateDelta value)
        {
            this.@value = value;
        }

        public LedgerStateDelta WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(LedgerStateDeltaResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator LedgerStateDelta(LedgerStateDeltaResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator LedgerStateDeltaResponse(LedgerStateDelta value)
        {
            return new LedgerStateDeltaResponse(value);
        }
    }

    /// <summary>
    /// Box information    
    /// </summary>
    [Serializable, AlgoApiFormatter(typeof(WrappedValueFormatter<BoxResponse, Box>))]
    public partial struct BoxResponse
        : IEquatable<BoxResponse>
        , IWrappedValue<Box>
    {
        [SerializeField]
        Box @value;

        public BoxResponse(Box value)
        {
            this.@value = value;
        }

        public Box WrappedValue
        {
            get => this.@value;
            set => this.@value = value;
        }

        public bool Equals(BoxResponse other)
        {
            return ArrayComparer.Equals(WrappedValue, other.WrappedValue);
        }

        public static implicit operator Box(BoxResponse wrapper)
        {
            return wrapper.WrappedValue;
        }

        public static implicit operator BoxResponse(Box value)
        {
            return new BoxResponse(value);
        }
    }

}
